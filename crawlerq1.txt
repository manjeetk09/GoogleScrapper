A debugger or debugging tool is a computer program that is used to test and debug other programs 
 The code to be examined might alternatively be running on an instruction set simulator , a technique that allows great power in its ability to halt when specific conditions are encountered, but which will typically be somewhat slower than executing the code directly on the appropriate processor
 Some debuggers offer two modes of operation, full or partial simulation, to limit this impact
 For example, the program might have tried to use an instruction not available on the current version of the CPU or attempted to access unavailable or protected memory
 When the program  traps  or reaches a preset condition, the debugger typically shows the location in the original code if it is a source_level debugger or symbolic debugger, commonly now seen in integrated development environments
 If it is a low_level debugger or a machine_language debugger it shows the line in the disassembly 
 If it is a low_level debugger or a machine_language debugger it shows the line in the disassembly 
 If it is a low_level debugger or a machine_language debugger it shows the line in the disassembly 
 If it is a low_level debugger or a machine_language debugger it shows the line in the disassembly 
 Debuggers also offer more sophisticated functions such as running a program step by step , stopping at some event or specified instruction by means of a breakpoint, and tracking the values of variables
 Some debuggers have the ability to modify program state while it is running
 It may also be possible to continue execution at a different location in the program to bypass a crash or logical error
 It often also makes it useful as a general verification tool, fault coverage, and performance analyzer, especially if instruction path lengths are shown
Most mainstream debugging engines, such as gdb and dbx, provide console_based command line interfaces
 Debugger front_ends are popular extensions to debugger engines that provide IDE integration, program animation, and visualization features
 These debuggers make it possible to step a program s execution backwards in time
 Various debuggers include this feature
NET, and some other languages, but not C  
 Some are open source  some are proprietary commercial software
 Some reverse debuggers slow down the target by orders of magnitude, but the best reverse debuggers cause a slowdown of 2  or less
 Reverse debugging is very useful for certain types of problems, but is still not commonly used yet
 For example, if the main target program is written in COBOL but calls assembly language subroutines and PL 1 subroutines, the debugger may have to dynamically switch modes to accommodate the changes in language as they occur
Most modern microprocessors have at least one of these features in their CPU design to make debugging easier
 Hardware support for single_stepping a program, such as the trap flag
 An instruction set that meets the Popek and Goldberg virtualization requirements makes it easier to write debugger software that runs on the same CPU as the software being debugged  such a CPU can execute the inner loops of the program under test at full speed, and still remain under debugger control
 An instruction set that meets the Popek and Goldberg virtualization requirements makes it easier to write debugger software that runs on the same CPU as the software being debugged  such a CPU can execute the inner loops of the program under test at full speed, and still remain under debugger control
 An instruction set that meets the Popek and Goldberg virtualization requirements makes it easier to write debugger software that runs on the same CPU as the software being debugged  such a CPU can execute the inner loops of the program under test at full speed, and still remain under debugger control
 An instruction set that meets the Popek and Goldberg virtualization requirements makes it easier to write debugger software that runs on the same CPU as the software being debugged  such a CPU can execute the inner loops of the program under test at full speed, and still remain under debugger control
 In_system programming allows an external hardware debugger to reprogram a system under test 
 Many systems with such ISP support also have other hardware debug support
 5 
 JTAG access to hardware debug interfaces such as those on ARM architecture processors or using the Nexus command set
 Processors used in embedded systems typically have extensive JTAG debug support
 Micro controllers with as few as six pins need to use low pin_count substitutes for JTAG, such as BDM, Spy_Bi_Wire, or debugWIRE on the Atmel AVR
 Micro controllers with as few as six pins need to use low pin_count substitutes for JTAG, such as BDM, Spy_Bi_Wire, or debugWIRE on the Atmel AVR
 DebugWIRE, for example, uses bidirectional signaling on the RESET pin
Some of the most capable and popular debuggers implement only a simple command line interface  often to maximize portability and minimize resource consumption
Some widely used debuggers are
 Firefox JavaScript debugger
 GDB _ the GNU debugger
 LLDB
 Microsoft Visual Studio Debugger
 Valgrind
 WinDbg
 Eclipse debugger API used in a range of IDEs
 Eclipse IDE Nodeclipse 
 WDW, the OpenWatcom debugger
Earlier minicomputer debuggers include
 Dynamic debugging technique 
 On_line Debugging Tool 
Earlier Mainframe debuggers include 
 1985 CA EZTEST
 1990 XPEDITER and Expediter CICS
Current mainframe debuggers
 Debug Tool for z OS  6 
 XPEDITER and Expediter CICS
 z XDC  7 
1 Features 1 1 Reverse debugging
2 Language dependency
3 Memory protection
4 Hardware support for debugging
5 Debugger front_ends
6 List of debuggers
7 See also
8 References
9 External links
1 1 Reverse debugging
Software Testing portal
Computer programming portal
Comparison of debuggers
Core dump
Kernel debugger
List of tools for static code analysis
Memory debugger
Packet analyzer
Profiling
Jonathan B  Rosenberg  How Debuggers Work  Algorithms, Data Structures, and Architecture  John Wiley   Sons  ISBN 0_471_14966_7  CS1 maint  Uses authors parameter 
OpenRCE  Various Debugger Resources and Plug_ins
IntelliTrace MSDN, Visual Studio 2015
Debuggers
Debugging
Utility software types
All articles lacking in_text citations
Articles needing additional references from May 2015
All articles needing additional references
Articles needing additional references from April 2008
Articles with too many examples
CS1 maint  Uses authors parameter
CS1 maint  Uses editors parameter
Not logged in
Talk
Contributions
Create account
Log in
Article
Talk
Read
Edit
View history
Main page
Contents
Featured content
Current events
Random article
Donate to Wikipedia
Wikipedia store
Help
About Wikipedia
Community portal
Recent changes
Contact page
What links here
Related changes
Upload file
Special pages
Permanent link
Page information
Wikidata item
Cite this page
Create a book
Download as PDF
Printable version
       
Az rbaycanca
         
Bosanski
Catal 
 e tina
Dansk
Deutsch
        
Espa ol
Esperanto
Euskara
     
Fran ais
   
Hrvatski
Bahasa Indonesia
 slenska
Italiano
     
       
      
Bahasa Melayu
Nederlands
   
Norsk bokm l
Polski
Portugu s
       
Simple English
         srpski
Srpskohrvatski                 
Suomi
Svenska
   
T rk e
          
Ti ng Vi t
  
This page was last edited on 12 June 2017, at 18 25 
Text is available under the Creative Commons Attribution_ShareAlike License  additional terms may apply  By using this site, you agree to the Terms of Use and Privacy Policy  Wikipedia  is a registered trademark of the Wikimedia Foundation, Inc , a non_profit organization 
Text is available under the Creative Commons Attribution_ShareAlike License  additional terms may apply  By using this site, you agree to the Terms of Use and Privacy Policy  Wikipedia  is a registered trademark of the Wikimedia Foundation, Inc , a non_profit organization 
Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Developers
Cookie statement
Mobile view
A debugger or debugging tool is a computer program that is used to test and debug other programs 
 The code to be examined might alternatively be running on an instruction set simulator , a technique that allows great power in its ability to halt when specific conditions are encountered, but which will typically be somewhat slower than executing the code directly on the appropriate processor
 Some debuggers offer two modes of operation, full or partial simulation, to limit this impact
 For example, the program might have tried to use an instruction not available on the current version of the CPU or attempted to access unavailable or protected memory
 When the program  traps  or reaches a preset condition, the debugger typically shows the location in the original code if it is a source_level debugger or symbolic debugger, commonly now seen in integrated development environments
 If it is a low_level debugger or a machine_language debugger it shows the line in the disassembly 
 If it is a low_level debugger or a machine_language debugger it shows the line in the disassembly 
 If it is a low_level debugger or a machine_language debugger it shows the line in the disassembly 
 If it is a low_level debugger or a machine_language debugger it shows the line in the disassembly 
 Debuggers also offer more sophisticated functions such as running a program step by step , stopping at some event or specified instruction by means of a breakpoint, and tracking the values of variables
 Some debuggers have the ability to modify program state while it is running
 It may also be possible to continue execution at a different location in the program to bypass a crash or logical error
 It often also makes it useful as a general verification tool, fault coverage, and performance analyzer, especially if instruction path lengths are shown
Most mainstream debugging engines, such as gdb and dbx, provide console_based command line interfaces
 Debugger front_ends are popular extensions to debugger engines that provide IDE integration, program animation, and visualization features
 These debuggers make it possible to step a program s execution backwards in time
 Various debuggers include this feature
NET, and some other languages, but not C  
 Some are open source  some are proprietary commercial software
 Some reverse debuggers slow down the target by orders of magnitude, but the best reverse debuggers cause a slowdown of 2  or less
 Reverse debugging is very useful for certain types of problems, but is still not commonly used yet
 For example, if the main target program is written in COBOL but calls assembly language subroutines and PL 1 subroutines, the debugger may have to dynamically switch modes to accommodate the changes in language as they occur
Most modern microprocessors have at least one of these features in their CPU design to make debugging easier
 Hardware support for single_stepping a program, such as the trap flag
 An instruction set that meets the Popek and Goldberg virtualization requirements makes it easier to write debugger software that runs on the same CPU as the software being debugged  such a CPU can execute the inner loops of the program under test at full speed, and still remain under debugger control
 An instruction set that meets the Popek and Goldberg virtualization requirements makes it easier to write debugger software that runs on the same CPU as the software being debugged  such a CPU can execute the inner loops of the program under test at full speed, and still remain under debugger control
 An instruction set that meets the Popek and Goldberg virtualization requirements makes it easier to write debugger software that runs on the same CPU as the software being debugged  such a CPU can execute the inner loops of the program under test at full speed, and still remain under debugger control
 An instruction set that meets the Popek and Goldberg virtualization requirements makes it easier to write debugger software that runs on the same CPU as the software being debugged  such a CPU can execute the inner loops of the program under test at full speed, and still remain under debugger control
 In_system programming allows an external hardware debugger to reprogram a system under test 
 Many systems with such ISP support also have other hardware debug support
 5 
 JTAG access to hardware debug interfaces such as those on ARM architecture processors or using the Nexus command set
 Processors used in embedded systems typically have extensive JTAG debug support
 Micro controllers with as few as six pins need to use low pin_count substitutes for JTAG, such as BDM, Spy_Bi_Wire, or debugWIRE on the Atmel AVR
 Micro controllers with as few as six pins need to use low pin_count substitutes for JTAG, such as BDM, Spy_Bi_Wire, or debugWIRE on the Atmel AVR
 DebugWIRE, for example, uses bidirectional signaling on the RESET pin
Some of the most capable and popular debuggers implement only a simple command line interface  often to maximize portability and minimize resource consumption
Some widely used debuggers are
 Firefox JavaScript debugger
 GDB _ the GNU debugger
 LLDB
 Microsoft Visual Studio Debugger
 Valgrind
 WinDbg
 Eclipse debugger API used in a range of IDEs
 Eclipse IDE Nodeclipse 
 WDW, the OpenWatcom debugger
Earlier minicomputer debuggers include
 Dynamic debugging technique 
 On_line Debugging Tool 
Earlier Mainframe debuggers include 
 1985 CA EZTEST
 1990 XPEDITER and Expediter CICS
Current mainframe debuggers
 Debug Tool for z OS  6 
 XPEDITER and Expediter CICS
 z XDC  7 
1 Features 1 1 Reverse debugging
2 Language dependency
3 Memory protection
4 Hardware support for debugging
5 Debugger front_ends
6 List of debuggers
7 See also
8 References
9 External links
1 1 Reverse debugging
Software Testing portal
Computer programming portal
Comparison of debuggers
Core dump
Kernel debugger
List of tools for static code analysis
Memory debugger
Packet analyzer
Profiling
Jonathan B  Rosenberg  How Debuggers Work  Algorithms, Data Structures, and Architecture  John Wiley   Sons  ISBN 0_471_14966_7  CS1 maint  Uses authors parameter 
OpenRCE  Various Debugger Resources and Plug_ins
IntelliTrace MSDN, Visual Studio 2015
Debuggers
Debugging
Utility software types
All articles lacking in_text citations
Articles needing additional references from May 2015
All articles needing additional references
Articles needing additional references from April 2008
Articles with too many examples
CS1 maint  Uses authors parameter
CS1 maint  Uses editors parameter
Not logged in
Talk
Contributions
Create account
Log in
Article
Talk
Read
Edit
View history
Main page
Contents
Featured content
Current events
Random article
Donate to Wikipedia
Wikipedia store
Help
About Wikipedia
Community portal
Recent changes
Contact page
What links here
Related changes
Upload file
Special pages
Permanent link
Page information
Wikidata item
Cite this page
Create a book
Download as PDF
Printable version
       
Az rbaycanca
         
Bosanski
Catal 
 e tina
Dansk
Deutsch
        
Espa ol
Esperanto
Euskara
     
Fran ais
   
Hrvatski
Bahasa Indonesia
 slenska
Italiano
     
       
      
Bahasa Melayu
Nederlands
   
Norsk bokm l
Polski
Portugu s
       
Simple English
         srpski
Srpskohrvatski                 
Suomi
Svenska
   
T rk e
          
Ti ng Vi t
  
This page was last edited on 12 June 2017, at 18 25 
Text is available under the Creative Commons Attribution_ShareAlike License  additional terms may apply  By using this site, you agree to the Terms of Use and Privacy Policy  Wikipedia  is a registered trademark of the Wikimedia Foundation, Inc , a non_profit organization 
Text is available under the Creative Commons Attribution_ShareAlike License  additional terms may apply  By using this site, you agree to the Terms of Use and Privacy Policy  Wikipedia  is a registered trademark of the Wikimedia Foundation, Inc , a non_profit organization 
Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Developers
Cookie statement
Mobile view
This is a list of debuggers
 computer programs that are used to test and debug other programs
1 Debuggers
2 Debugger front_ends
3 See also
4 References
5 External links
Advanced Debugger The standard UNIX debugger
Allinea DDT _ graphical debugger for debugging multithreaded and multiprocess applications on Linux platforms
AQtime   profiler and memory resource debugger for Windows
ARM Development Studio 5 
CA EZTEST   was a CICS interactive test debug software package
CodeView   was a debugger for the DOS platform
DBG   a PHP Debugger and Profiler
dbx   a proprietary source_level debugger for Pascal Fortran C C   on UNIX platforms
DEBUG   the built_in debugger of DOS and Microsoft Windows
GNU Debugger
Opera Dragonfly   JavaScript and HTML DOM debugger
Dynamic debugging technique , and its octal counterpart Octal Debugging Technique
XPEDITER a proprietary source_level debugger for Assembler,COBOL   PL 1 on IBM platforms
FusionDebug   interactive debugger for Adobe ColdFusion, Railo, and Lucee CFML Engines
Parasoft Insure     a multi_platform memory debugger
Intel Debugger
Interactive Disassembler 
Java Platform Debugger Architecture
JSwat   open_source Java debugger
LLDB
MacsBug   a debugger for ancient MacOS releases
Modular Debugger a C C   source level debugger for Solaris and derivates
OllyDbg   a disassembly_based debugger for Windows 
Omniscient Debugger   Forward and backward debugger for Java
Python debugger
IBM Rational Purify   multi_platform memory debugger
sdb   a symbolic debugger for C programs for ancient UNIX platforms
SIMMON 
SoftICE   kernel mode debugger for Windows
Lauterbach TRACE32   in_circuit debugger for embedded Systems
Turbo Debugger Pascal C assembly debugger for DOS
Ups   C, Fortran source level debugger
Valgrind
VB Watch Debugger   debugger for Visual Basic 6 0
Microsoft Visual Studio Debugger   debugger for  NET and native Windows applications
Xdebug   PHP debugger and profiler
XPEDITER  family of mainframe debuggers
Many Eclipse perspectives, e g  the Java Development Tools , 1  provide a debugger front_end 
Allinea DDT _ a graphical debugger supporting for parallel multi_process and multithreaded applications, for C   C   and F90 
Allinea DDT _ a graphical debugger supporting for parallel multi_process and multithreaded applications, for C   C   and F90 
Allinea DDT _ a graphical debugger supporting for parallel multi_process and multithreaded applications, for C   C   and F90 
Allinea DDT _ a graphical debugger supporting for parallel multi_process and multithreaded applications, for C   C   and F90 
DDD is the standard front_end from the GNU Project  It is a complex tool that works with most common debuggers natively or with some external programs  
DDD is the standard front_end from the GNU Project  It is a complex tool that works with most common debuggers natively or with some external programs  
DDD is the standard front_end from the GNU Project  It is a complex tool that works with most common debuggers natively or with some external programs  
DDD is the standard front_end from the GNU Project  It is a complex tool that works with most common debuggers natively or with some external programs  
GDB GUI Emacs   Emacs editor with built_in support for the GNU Debugger acts as the frontend  KDbg   Part of the KDE development tools  Nemiver   A GDB frontend that integrates well in the GNOME desktop environment  xxgdb   X_window frontend for GDB and dbx debugger  Qt Creator   multi_platform frontend for GDB, CDB and LLDB  Allinea s DDT   a parallel and distributed front_end to a modified version of GDB  Xcode   contains a GDB front_end as well  SlickEdit   contains a GDB front_end as well  Eclipse C C   Development Tools  2    includes visual debugging tools based on GDB  CodeLite   An open source, cross platform C C   IDE which have front end for gdb, the next version of CodeLite will also include a front end to the LLDB CodeBlocks   A free cross_platform C, C   and Fortran IDE with a front end for gdb  RR   An open source C C   debugger by Mozilla, supporting reproduction of program state and reverse execution
GDB GUI Emacs   Emacs editor with built_in support for the GNU Debugger acts as the frontend  KDbg   Part of the KDE development tools  Nemiver   A GDB frontend that integrates well in the GNOME desktop environment  xxgdb   X_window frontend for GDB and dbx debugger  Qt Creator   multi_platform frontend for GDB, CDB and LLDB  Allinea s DDT   a parallel and distributed front_end to a modified version of GDB  Xcode   contains a GDB front_end as well  SlickEdit   contains a GDB front_end as well  Eclipse C C   Development Tools  2    includes visual debugging tools based on GDB  CodeLite   An open source, cross platform C C   IDE which have front end for gdb, the next version of CodeLite will also include a front end to the LLDB CodeBlocks   A free cross_platform C, C   and Fortran IDE with a front end for gdb  RR   An open source C C   debugger by Mozilla, supporting reproduction of program state and reverse execution
GDB GUI Emacs   Emacs editor with built_in support for the GNU Debugger acts as the frontend  KDbg   Part of the KDE development tools  Nemiver   A GDB frontend that integrates well in the GNOME desktop environment  xxgdb   X_window frontend for GDB and dbx debugger  Qt Creator   multi_platform frontend for GDB, CDB and LLDB  Allinea s DDT   a parallel and distributed front_end to a modified version of GDB  Xcode   contains a GDB front_end as well  SlickEdit   contains a GDB front_end as well  Eclipse C C   Development Tools  2    includes visual debugging tools based on GDB  CodeLite   An open source, cross platform C C   IDE which have front end for gdb, the next version of CodeLite will also include a front end to the LLDB CodeBlocks   A free cross_platform C, C   and Fortran IDE with a front end for gdb  RR   An open source C C   debugger by Mozilla, supporting reproduction of program state and reverse execution
GDB GUI Emacs   Emacs editor with built_in support for the GNU Debugger acts as the frontend  KDbg   Part of the KDE development tools  Nemiver   A GDB frontend that integrates well in the GNOME desktop environment  xxgdb   X_window frontend for GDB and dbx debugger  Qt Creator   multi_platform frontend for GDB, CDB and LLDB  Allinea s DDT   a parallel and distributed front_end to a modified version of GDB  Xcode   contains a GDB front_end as well  SlickEdit   contains a GDB front_end as well  Eclipse C C   Development Tools  2    includes visual debugging tools based on GDB  CodeLite   An open source, cross platform C C   IDE which have front end for gdb, the next version of CodeLite will also include a front end to the LLDB CodeBlocks   A free cross_platform C, C   and Fortran IDE with a front end for gdb  RR   An open source C C   debugger by Mozilla, supporting reproduction of program state and reverse execution
GDB GUI Emacs   Emacs editor with built_in support for the GNU Debugger acts as the frontend  KDbg   Part of the KDE development tools  Nemiver   A GDB frontend that integrates well in the GNOME desktop environment  xxgdb   X_window frontend for GDB and dbx debugger  Qt Creator   multi_platform frontend for GDB, CDB and LLDB  Allinea s DDT   a parallel and distributed front_end to a modified version of GDB  Xcode   contains a GDB front_end as well  SlickEdit   contains a GDB front_end as well  Eclipse C C   Development Tools  2    includes visual debugging tools based on GDB  CodeLite   An open source, cross platform C C   IDE which have front end for gdb, the next version of CodeLite will also include a front end to the LLDB CodeBlocks   A free cross_platform C, C   and Fortran IDE with a front end for gdb  RR   An open source C C   debugger by Mozilla, supporting reproduction of program state and reverse execution
GDB GUI Emacs   Emacs editor with built_in support for the GNU Debugger acts as the frontend  KDbg   Part of the KDE development tools  Nemiver   A GDB frontend that integrates well in the GNOME desktop environment  xxgdb   X_window frontend for GDB and dbx debugger  Qt Creator   multi_platform frontend for GDB, CDB and LLDB  Allinea s DDT   a parallel and distributed front_end to a modified version of GDB  Xcode   contains a GDB front_end as well  SlickEdit   contains a GDB front_end as well  Eclipse C C   Development Tools  2    includes visual debugging tools based on GDB  CodeLite   An open source, cross platform C C   IDE which have front end for gdb, the next version of CodeLite will also include a front end to the LLDB CodeBlocks   A free cross_platform C, C   and Fortran IDE with a front end for gdb  RR   An open source C C   debugger by Mozilla, supporting reproduction of program state and reverse execution
GDB GUI Emacs   Emacs editor with built_in support for the GNU Debugger acts as the frontend  KDbg   Part of the KDE development tools  Nemiver   A GDB frontend that integrates well in the GNOME desktop environment  xxgdb   X_window frontend for GDB and dbx debugger  Qt Creator   multi_platform frontend for GDB, CDB and LLDB  Allinea s DDT   a parallel and distributed front_end to a modified version of GDB  Xcode   contains a GDB front_end as well  SlickEdit   contains a GDB front_end as well  Eclipse C C   Development Tools  2    includes visual debugging tools based on GDB  CodeLite   An open source, cross platform C C   IDE which have front end for gdb, the next version of CodeLite will also include a front end to the LLDB CodeBlocks   A free cross_platform C, C   and Fortran IDE with a front end for gdb  RR   An open source C C   debugger by Mozilla, supporting reproduction of program state and reverse execution
Emacs   Emacs editor with built_in support for the GNU Debugger acts as the frontend 
KDbg   Part of the KDE development tools 
Nemiver   A GDB frontend that integrates well in the GNOME desktop environment 
xxgdb   X_window frontend for GDB and dbx debugger 
Qt Creator   multi_platform frontend for GDB, CDB and LLDB 
Allinea s DDT   a parallel and distributed front_end to a modified version of GDB 
Xcode   contains a GDB front_end as well 
SlickEdit   contains a GDB front_end as well 
Eclipse C C   Development Tools  2    includes visual debugging tools based on GDB 
Eclipse C C   Development Tools  2    includes visual debugging tools based on GDB 
CodeLite   An open source, cross platform C C   IDE which have front end for gdb, the next version of CodeLite will also include a front end to the LLDB 
CodeLite   An open source, cross platform C C   IDE which have front end for gdb, the next version of CodeLite will also include a front end to the LLDB 
CodeBlocks   A free cross_platform C, C   and Fortran IDE with a front end for gdb 
RR   An open source C C   debugger by Mozilla, supporting reproduction of program state and reverse execution
Comparison of debuggers
13 Linux Debuggers for C   Reviewed
Debuggers
Lists of software
Not logged in
Talk
Contributions
Create account
Log in
Article
Talk
Read
Edit
View history
Main page
Contents
Featured content
Current events
Random article
Donate to Wikipedia
Wikipedia store
Help
About Wikipedia
Community portal
Recent changes
Contact page
What links here
Related changes
Upload file
Special pages
Permanent link
Page information
Wikidata item
Cite this page
Create a book
Download as PDF
Printable version
This page was last edited on 20 April 2017, at 15 03 
Text is available under the Creative Commons Attribution_ShareAlike License  additional terms may apply  By using this site, you agree to the Terms of Use and Privacy Policy  Wikipedia  is a registered trademark of the Wikimedia Foundation, Inc , a non_profit organization 
Text is available under the Creative Commons Attribution_ShareAlike License  additional terms may apply  By using this site, you agree to the Terms of Use and Privacy Policy  Wikipedia  is a registered trademark of the Wikimedia Foundation, Inc , a non_profit organization 
Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Developers
Cookie statement
Mobile view
Go through the following examples to understand the procedure of debugging a program and core dumped
 Debugging Example 2 This example demonstrates a program that can dump a core due to non_initialized memory
Debugging Example 1
Debugging Example 2
  Copyright 2017
 All Rights Reserved
Jobs
 SENDFiles
 Whiteboard
 Net Meeting
Tools
 Articles
Facebook Google  Twitter Linkedin YouTube
Facebook
Google 
Twitter
Linkedin
YouTube
Home
Tutorials Library
Coding Ground
Tutor Connect
Videos
Search
GNU Debugger Tutorial
GDB _ Home
GDB _ What is GDB 
GDB _ Installation
GDB _ Debugging Symbols
GDB _ Commands
GDB _ Summary
GNU Debugger Useful Resources
GDB _ Quick Guide
GDB _ Resources
GDB _ Discussion
Selected Reading
Developer s Best Practices
Questions and Answers
Effective Resume Writing
HR Interview Questions
Computer Glossary
Who is Who
Write for us
FAQ s
Helping
Contact
The following sections describe debugger command programs
The following example uses the 
foreach token to search for WORD values of 5a4d
The following example uses the 
foreach token to search for WORD values of 5a4d
 For each 5a4d value that is found, the debugger displays 8 DWORD values, starting 4 bytes prior to the address where the 5a4d DWORD was found
Note If you want to operate on the variable name in the OutCommands portion of the command, you must add a space after the variable name
Note If you want to operate on the variable name in the OutCommands portion of the command, you must add a space after the variable name
 For example, in the preceeding example, there is a space between the variable place and the subtraction operator
 For example, in the preceeding example, there is a space between the variable place and the subtraction operator
The _ option together with the s command causes its output to include only the addresses it finds, not the values that are found at those addresses
The 1m option together with the lm command causes its output to include only the addresses of the modules, not the full description of the modules
The preceding example uses the      token to make sure aliases are replaced even if they are next to other text
 Note that the     token works on the variables that are used in 
 Note that the     token works on the variables that are used in 
foreach and on true aliases
 This command loads the whole file, replaces all carriage returns with semicolons, and executes the resulting block
 This command enables you to write readable programs by using multiple lines and indentation, instead of having to squeeze the whole program onto a single line
This example illustrates the following features
 The  t0,  t1, and  t2 pseudo_registers are used as variables in this program
 The program also uses aliases named Procc and  ImageName
 This program uses the MASM expression evaluator
 This token causes the program to use the C   expression evaluator to parse the expression within the parentheses
 This usage enables the program to use the C   structure tokens directly
 The   flag is used with the r command
The  t0,  t1, and  t2 pseudo_registers are used as variables in this program
 The program also uses aliases named Procc and  ImageName
This program uses the MASM expression evaluator
 This token causes the program to use the C   expression evaluator to parse the expression within the parentheses
 This usage enables the program to use the C   structure tokens directly
The   flag is used with the r command
This example illustrates the following features
 This program uses the MASM expression evaluator
 However, in two places, the   c  token appears
 This token causes the program to use the C   expression evaluator to parse the expression within the parentheses
 This usage enables the program to use C   structure tokens directly
 The   flag is used with the r command
 In the body of the loop,  t1 has the type ntdll _LDR_DATA_TABLE_ENTRY  , so the program can make direct member references
 In the body of the loop,  t1 has the type ntdll _LDR_DATA_TABLE_ENTRY  , so the program can make direct member references
 The user_named aliases  Base and  Mod are used in this program
 The dollar signs reduce the possibility that these aliases have been used previously in the current debugger session
 The dollar signs are not necessary
 The    v
   token interprets the alias literally, preventing it from being replaced if it was defined before the script is run
 The 
block token is used to add an extra alias replacement step
 Alias replacement occurs one time for the whole script when it is loaded and one time when each block is entered
 Without the 
block token and its braces, the 
echo command does not receive the values of the  Mod and  Base aliases that are assigned in the previous lines
This program uses the MASM expression evaluator
 However, in two places, the   c  token appears
 This token causes the program to use the C   expression evaluator to parse the expression within the parentheses
 This usage enables the program to use C   structure tokens directly
The   flag is used with the r command
 In the body of the loop,  t1 has the type ntdll _LDR_DATA_TABLE_ENTRY  , so the program can make direct member references
 In the body of the loop,  t1 has the type ntdll _LDR_DATA_TABLE_ENTRY  , so the program can make direct member references
The user_named aliases  Base and  Mod are used in this program
 The dollar signs reduce the possibility that these aliases have been used previously in the current debugger session
 The dollar signs are not necessary
 The    v
   token interprets the alias literally, preventing it from being replaced if it was defined before the script is run
The 
block token is used to add an extra alias replacement step
 Alias replacement occurs one time for the whole script when it is loaded and one time when each block is entered
 Without the 
block token and its braces, the 
echo command does not receive the values of the  Mod and  Base aliases that are assigned in the previous lines
Send comments about this topic to Microsoft
Comments
Edit
Share Twitter Facebook
 
Theme Light Dark
Blog
Privacy   Cookies
Terms of Use
Feedback
Impressum
Trademarks
Errors can happen, every time you write some new computer code
Many of these errors are difficult to diagnose
Often, when programming code contains errors, nothing will happen
 There are no error messages, and you will get no indications where to search for errors
 There are no error messages, and you will get no indications where to search for errors
 Searching for errors in programming code is called code debugging
Debugging is not easy
If your browser supports debugging, you can use console
If your browser supports debugging, you can use console
logto display JavaScript values in the debugger window
In the debugger window, you can set breakpoints in the JavaScript code
In the debugger window, you can set breakpoints in the JavaScript code
In the debugger window, you can set breakpoints in the JavaScript code
At each breakpoint, JavaScript will stop executing, and let you examine JavaScript values
After examining values, you can resume the execution of code 
The debugger keyword stops the execution of JavaScript, and calls the debugging function
The debugger keyword stops the execution of JavaScript, and calls the debugging function
This has the same function as setting a breakpoint in the debugger
If no debugging is available, the debugger statement has no effect
If no debugging is available, the debugger statement has no effect
With the debugger turned on, this code will stop executing before it executes the third line
Otherwise follow these steps
Debugging is the process of testing, finding, and reducing bugs in computer programs
Debugging is the process of testing, finding, and reducing bugs in computer programs
 The first known computer bug was a real bug stuck in the electronics
 The first known computer bug was a real bug stuck in the electronics
Tabs Dropdowns Accordions Convert Weights Animated Buttons Side Navigation Top Navigation JS Animations Modal Boxes Progress Bars Parallax Login Form HTML Includes Google Maps Loaders Tooltips Slideshow Filter List Sort List
HTML, CSS, JavaScript, PHP, jQuery, Bootstrap and XML
Open the browser 
From the menu, select tools 
Finally, select Console 
Open the browser 
Go to the web page  http   www getfirebug com
Follow the instructions how to  install Firebug
Open the browser 
From the menu, select tools 
Finally, select Console 
Open the browser 
Go to the webpage  http   dev opera com
Follow the instructions how to  add a Developer Console button to your toolbar 
Open the browser 
Go to the webpage  http   safari_extensions apple com
Follow the instructions how to  install Firebug Lite 
Go to Safari, Preferences, Advanced in the main menu 
Check  Enable Show Develop menu in menu bar  
Debugging, in computer programming and engineering, is a multistep process that involves identifying a problem, isolating the source of the problem, and then either correcting the problem or determining a way to work around it
 The final step of debugging is to test the correction or workaround and make sure it works
Understand respected criteria for quality assurance, tracking changes, and see a review of 5 great tools for developers
Understand respected criteria for quality assurance, tracking changes, and see a review of 5 great tools for developers
Understand respected criteria for quality assurance, tracking changes, and see a review of 5 great tools for developers
Understand respected criteria for quality assurance, tracking changes, and see a review of 5 great tools for developers
This email address doesn t appear to be valid
This email address is already registered
 Please login
Please provide a Corporate E_mail Address
By submitting my Email address I confirm that I have read and accepted the Terms of Use and Declaration of Consent
 Debugging is part of the software testing process and is an integral part of the entire software development lifecycle
 Debugging is part of the software testing process and is an integral part of the entire software development lifecycle
 Debugging is part of the software testing process and is an integral part of the entire software development lifecycle
 The debugging process starts as soon as code is written and continues in successive stages as code is combined with other units of programming to form a software product
 In a large program that has thousands and thousands of lines of code, the debugging process can be made easier by using strategies such as unit tests, code reviews and pair programming
 In a large program that has thousands and thousands of lines of code, the debugging process can be made easier by using strategies such as unit tests, code reviews and pair programming
 In a large program that has thousands and thousands of lines of code, the debugging process can be made easier by using strategies such as unit tests, code reviews and pair programming
Once an error has been identified, it is necessary to actually find the error in the code
 At this point, it can be useful to look at the code s logging and use a stand_alone debugger tool or the debugging component of an integrated development environment 
 Invariably, the bugs in the functions that get most use are found and fixed first
 In some cases, the module that presents the problem is obvious, while the line of code itself is not
 In that case, unit tests __ such as JUnit and xUnit, which allow the programmer to run a specific function with specific inputs __ can be helpful in debugging
 In that case, unit tests __ such as JUnit and xUnit, which allow the programmer to run a specific function with specific inputs __ can be helpful in debugging
The standard practice is to set up a  breakpoint  and run the program until that breakpoint, at which time program execution stops
The standard practice is to set up a  breakpoint  and run the program until that breakpoint, at which time program execution stops
 The debugging component of an IDE typically provides the programmer with the capability to view memory and see variables, run the program to the next breakpoint, execute just the next line of code, and, in some cases, change the value of variables or even change the contents of the line of code about to be executed
Source code analyzers, which include security, common code errors and complexity analyzers, can also be helpful in debugging
 A complexity analyzer can find modules that are so intricate as to be hard to understand and test
 Other debugging tools include advanced logging and simulators that allow the programmer to model how an app on a mobile device will display and behave
Some tools, especially open source tools and scripting languages, do not run in an IDE and require a more manual approach to debugging
The use of the word bug as a synonym for error originated in engineering
 The term s application to computing and the inspiration for using the word debugging as a synonym for troubleshooting has been attributed to Admiral Grace Hopper, a pioneer in computer programming, who was also known for her dry sense of humor
 The term s application to computing and the inspiration for using the word debugging as a synonym for troubleshooting has been attributed to Admiral Grace Hopper, a pioneer in computer programming, who was also known for her dry sense of humor
S
 Navy s first computer, Admiral Hopper and her team  debugged  the computer and saved the moth
 Navy s first computer, Admiral Hopper and her team  debugged  the computer and saved the moth
 Navy s first computer, Admiral Hopper and her team  debugged  the computer and saved the moth
Find more PRO  content and other member only offers, here
Agile automation techniques answer the need for development speed
Data analytics metrics can be the answer to optimized app performance
Margaret Rouse asks
 Privacy
Microsoft delivers Draft, a new tool that simplifies Kubernetes cluster management by easing the development and deployment of 
Many organizations struggle to bring development and operations together, only to realize that effective DevOps means 
Find out how Cure
org improved application performance management to fine tune their website, increase donations, and make a 
How is big data and IT helping the agriculture industry  By looking at information in new ways, technology is helping to improve 
Red Hat adds to its OpenShift
Techniques and tools abound for cloud app development
The cloud was supposed to save us
Mobile app users want a consistent experience for all apps __ on all devices
 AWS Device Farm tests application features but 
In this chapter excerpt from Serverless Architectures on AWS, author Peter Sbarski shares five tricks developers can use to 
While much of the developer community turns to Kubernetes to schedule containers, open source AWS Blox could carve out a niche 
Lenovo and Autodesk are two organizations that are increasing their use of the cloud for analytics applications, looking to lower
When deploying deep learning models into production, experts say it s important to take care of the basics, like model design and
After forming a new joint venture, LifeWorks, HCM vendor Ceridian uses LifeWorks  employee recognition, engagement and perks 
Choose your talent management system wisely or risk irking your employees
 Learn the criteria for evaluating software that 
Retailers such as Walmart are beginning to offer self_service health kiosks that allow patients to check their vital signs while 
For Brent Shafer, CEO of Philips North America, the name of the health IT game is connected care
 Shafer explains that this is 
Despite some health IT experts saying that certain challenges are keeping genomics in healthcare from happening, there are other 
All Rights Reserved, Copyright 2006 _ 2017, TechTarget
Techtarget Network
News
Features
Tips
Agile DevOps
Answers
Buyer s Guides
Essential Guides
Opinions
Photo Stories
Podcasts
Quizzes
Tutorials
Sponsored Communities
SearchSoftwareQuality
Topic Software Testing ALM Models and Methodologies Project Management Requirements Security Testing and QA All Topics
SubTopic Mobile Testing Automated Software Testing Cloud Application Testing Cloud Computing Testing and Development Exploratory Testing Mobile Testing Regression Testing Software Test Design Software Testing Methodologies Testing Tools and Frameworks User Acceptance Testing Software Performance Testing Functional Software Testing All Subtopics
SubTopic Mobile Testing Automated Software Testing Cloud Application Testing Cloud Computing Testing and Development Exploratory Testing Mobile Testing Regression Testing Software Test Design Software Testing Methodologies Testing Tools and Frameworks User Acceptance Testing Software Performance Testing Functional Software Testing All Subtopics
ALM
Models and Methodologies
Project Management
Requirements
Security Testing and QA
All Topics
Automated Software Testing
Cloud Application Testing
Cloud Computing Testing and Development
Exploratory Testing
Mobile Testing
Regression Testing
Software Test Design
Software Testing Methodologies
Testing Tools and Frameworks
User Acceptance Testing
Software Performance Testing
Functional Software Testing
All Subtopics
Follow 
Home
Mobile Testing
Programming
debugging
Share this item with your network 
By submitting my Email address I confirm that I have read and accepted the Terms of Use and Declaration of Consent 
Debugging, tracing and profiling
The Art of Debugging 
Get expert advice on debugging a webpage
Better software through debugging and unit testing
How to use unit testing to debug programs
All
News
Get Started
Evaluate
Manage
Problem Solve
What s the future of software testing  Start with data science
Why mobile application emulator choices for test and QA can be tricky
What s the future of software testing  Start with data science
QUEST speakers confirm mobile test automation vital for performance
Why continuous testing is gaining ground, but not enough
Understand the importance of a mobile testing strategy
device cloud
A primer on automated API testing
Consider these requirements when building B2B mobile apps
Why mobile application emulator choices for test and QA can be tricky
The future of software testing  It s a brave new world
The future of software testing  It s a brave new world
How can a virtualized network help with app testing 
Find the right recipe for mobile business apps
Should I get to know customer experience testing 
A primer on automated API testing
Find the right recipe for mobile business apps
Tips for enterprise mobile app deployment
Roundup of mobile emulator tools
Reviewing open source Appium
Mobile testing tutorial  Testers transition from Web to mobile apps
ehandbook_cover Agile automation techniques answer the need for development speed
E_Handbook Data analytics metrics can be the answer to optimized app performance
Margaret Rouse asks  What debugging tips do you have that work well  Join the Discussion
 
 
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
 
Microservices
Java
Cloud Applications
AWS
Business Analytics
Financial Applications
Health IT
Microsoft s Draft eases Kubernetes cluster management, app development Microsoft delivers Draft, a new tool that simplifies Kubernetes cluster management by easing the development and deployment of    
Microsoft s Draft eases Kubernetes cluster management, app development Microsoft delivers Draft, a new tool that simplifies Kubernetes cluster management by easing the development and deployment of    
Effective DevOps hinges on automating a continuous delivery pipeline Many organizations struggle to bring development and operations together, only to realize that effective DevOps means    
Changing lives through improved application performance Find out how Cure org improved application performance management to fine tune their website, increase donations, and make a    
Improving plant production performance with IT in the agriculture industry How is big data and IT helping the agriculture industry  By looking at information in new ways, technology is helping to improve    
Red Hat expands its container strategy with Codenvy acquisition Red Hat adds to its OpenShift io cloud_based integrated development environment with its acquisition of Codenvy, a maker of    
Beware the dreaded scourge of cloud sprawl  Act now or lose control The cloud was supposed to save us  So, why are we now suffering from dreaded cloud sprawl, and what should we do about it  Cloud    
AWS Device Farm testing doesn t give full performance picture Mobile app users want a consistent experience for all apps __ on all devices  AWS Device Farm tests application features but    
AWS Device Farm testing doesn t give full performance picture Mobile app users want a consistent experience for all apps __ on all devices  AWS Device Farm tests application features but    
AWS Device Farm testing doesn t give full performance picture Mobile app users want a consistent experience for all apps __ on all devices  AWS Device Farm tests application features but    
Strategies to accelerate AWS Lambda functions In this chapter excerpt from Serverless Architectures on AWS, author Peter Sbarski shares five tricks developers can use to    
AWS Blox enters crowded open source container market amid skepticism While much of the developer community turns to Kubernetes to schedule containers, open source AWS Blox could carve out a niche    
How enterprises can find the right deep learning use cases The world s top tech companies are currently the biggest users of deep learning applications, but more typical enterprises may be   
Experts explain how to deploy deep learning in production When deploying deep learning models into production, experts say it s important to take care of the basics, like model design and   
Ceridian uses employee engagement tool from its own joint venture After forming a new joint venture, LifeWorks, HCM vendor Ceridian uses LifeWorks  employee recognition, engagement and perks    
Evaluate HR technology to fit your talent management processes Choose your talent management system wisely or risk irking your employees  Learn the criteria for evaluating software that    
Rise of retail health kiosks enables greater patient engagement Retailers such as Walmart are beginning to offer self_service health kiosks that allow patients to check their vital signs while    
Connected care a focus for CEO of Philips North America For Brent Shafer, CEO of Philips North America, the name of the health IT game is connected care  Shafer explains that this is    
Genomics in healthcare is ready now, experts say Despite some health IT experts saying that certain challenges are keeping genomics in healthcare from happening, there are other    
Genomics in healthcare is ready now, experts say Despite some health IT experts saying that certain challenges are keeping genomics in healthcare from happening, there are other    
About Us
Meet The Editors
Contact Us
Privacy Policy
Advertisers
Business Partners
Media Kit
Corporate Site
Contributors
Reprints
Archive
Site Map
Answers
E_Products
Events
Features
Guides
Opinions
Photo Stories
Quizzes
Tips
Tutorials
Videos
This example shows how to debug a DATA step when output is missing
This program creates information about a travel tour group
 The data files contain two types of records
 One type contains the tour code, and the other type contains customer information
 One type contains the tour code, and the other type contains customer information
 One type contains the tour code, and the other type contains customer information
 One type contains the tour code, and the other type contains customer information
 The program creates a report listing tour number, name, age, and sex for each customer
The program executes without error, but the output is unexpected
 The output does not contain values for the variable Tour
 Viewing the SAS log will not help you debug the program because the data are valid and no errors appear in the log
 Viewing the SAS log will not help you debug the program because the data are valid and no errors appear in the log
 Viewing the SAS log will not help you debug the program because the data are valid and no errors appear in the log
 To help identify the logic error, run the DATA step again using the DATA step debugger
The following display shows the resulting two debugger windows
The upper window is the DEBUGGER LOG window
 Issue debugger commands in this window by typing commands on the debugger command line 
 The debugger displays the command and results in the upper part of the window
The lower window is the DEBUGGER SOURCE window
 Each line in the DATA step is numbered with the same line number used in the SAS log
 This means that SAS has compiled the step and will begin to execute the step at the top of the DATA step loop
To debug a DATA step, create a hypothesis about the logic error and test it by examining the values of variables at various points in the program
Note
   Most debugger commands have abbreviations, and you can assign commands to function keys
   Most debugger commands have abbreviations, and you can assign commands to function keys
 The examples in this section, however, show the full command name to help you find the commands in Debugger Commands by Category
 The examples in this section, however, show the full command name to help you find the commands in Debugger Commands by Category
 The examples in this section, however, show the full command name to help you find the commands in Debugger Commands by Category
   When you press ENTER, the following display appears
The values of all variables appear in the DEBUGGER LOG window
 SAS has compiled, but not yet executed, the INPUT statement
Use the STEP command to execute the DATA step statements one at a time
 By default, the STEP command is assigned to the ENTER key
Because Tour information was missing in the program output, enter the EXAMINE command to view the value of the variable Tour for the first iteration of the DATA step
The following display shows the results
The variable Tour contains the value Tour 101, showing you that Tour was read
 The first iteration of the DATA step worked as intended
 Press ENTER to reach the top of the DATA step
You can use the BREAK command to suspend DATA step execution at a particular line you designate
Execute the GO command to continue DATA step execution until it reaches the breakpoint 
Execute the GO command to continue DATA step execution until it reaches the breakpoint 
The following display shows the result
 Examine the values of all the variables to see their status at this point
The following display shows the values
 The program data vector gets reset to missing values at the beginning of each iteration and therefore does not retain the value of Tour
To end the debugging session, issue the QUIT command on the debugger command line
The debugging windows disappear, and the original SAS session resumes
Correct the original program by adding the RETAIN statement
 Delete the DEBUG option from the DATA step, and resubmit the program
This example shows how to debug a program when you use format statements to format dates
 The following program creates a report that lists travel tour dates for specific countries
 The following program creates a report that lists travel tour dates for specific countries
The value of Duration for the tour to Venezuela shows a negative number, _290 days
 To help identify the error, run the DATA step again using the DATA step debugger
At the DEBUGGER LOG command line, issue the EXAMINE command to display the values of all variables in the program data vector before execution begins
Initial values of all variables appear in the DEBUGGER LOG window
Press ENTER to issue the STEP command
 SAS executes the INPUT statement, and the assignment statement is now highlighted
Issue the EXAMINE command to display the current value of all variables
The following display shows the results
Because a problem exists with the Venezuela tour, suspend execution before the assignment statement when the value of Country equals Venezuela
 Set a breakpoint to do this
Execute the GO command to resume program execution
SAS stops execution when the country name is Venezuela
SAS stops execution when the country name is Venezuela
 You can examine Start and End tour dates for the Venezuela trip
 Because the assignment statement is highlighted , there will be no value for Duration
The following display shows the results
To view formatted SAS dates, issue the EXAMINE command using the DATEw
 format
The following display shows the results
Because the tour ends on November 18, 2000, and not on January 18, 2000, there is an error in the variable End
Because the tour ends on November 18, 2000, and not on January 18, 2000, there is an error in the variable End
Because the tour ends on November 18, 2000, and not on January 18, 2000, there is an error in the variable End
Because the tour ends on November 18, 2000, and not on January 18, 2000, there is an error in the variable End
Because the tour ends on November 18, 2000, and not on January 18, 2000, there is an error in the variable End
Because the tour ends on November 18, 2000, and not on January 18, 2000, there is an error in the variable End
 Examine the source data in the program and notice that the value for End has a typographical error
 By using the SET command, you can temporarily set the value of End to November 18 to see if you get the anticipated result
 Issue the SET command using the DDMMMYYw
 format
Press ENTER to issue the STEP command and execute the assignment statement
Press ENTER to issue the STEP command and execute the assignment statement
Issue the EXAMINE command to view the tour date and Duration fields
The following display shows the results
The Start, End, and Duration fields contain correct data
End the debugging session by issuing the QUIT command on the DEBUGGER LOG command line
 Correct the original data in the SAS program, delete the DEBUG option, and resubmit the program
An iterative DO, DO WHILE, or DO UNTIL statement can iterate many times during a single iteration of the DATA step
 When you debug DO loops, you can examine several iterations of the loop by using the AFTER option in the BREAK command
 When you debug DO loops, you can examine several iterations of the loop by using the AFTER option in the BREAK command
 The AFTER option requires a number that indicates how many times the loop will iterate before it reaches the breakpoint
 The AFTER option requires a number that indicates how many times the loop will iterate before it reaches the breakpoint
 The AFTER option requires a number that indicates how many times the loop will iterate before it reaches the breakpoint
 For example, consider this data set
When you issue the GO commands, the debugger suspends execution when I has the values of 5, 10, 15, and 20 in the DO loop iteration
When you issue the GO commands, the debugger suspends execution when I has the values of 5, 10, 15, and 20 in the DO loop iteration
When you issue the GO commands, the debugger suspends execution when I has the values of 5, 10, 15, and 20 in the DO loop iteration
When you issue the GO commands, the debugger suspends execution when I has the values of 5, 10, 15, and 20 in the DO loop iteration
In an iterative DO loop, select a value for the AFTER option that can be divided evenly into the number of iterations of the loop
If you do not select a value that can be evenly divided , the AFTER option causes the debugger to suspend execution when I has the values of 3, 6, 9, 12, 15, and 18
If you do not select a value that can be evenly divided , the AFTER option causes the debugger to suspend execution when I has the values of 3, 6, 9, 12, 15, and 18
 When the DO loop iterates the second time, I has the values of 1, 4, 7, 10, 13, and 16
 When the DO loop iterates the second time, I has the values of 1, 4, 7, 10, 13, and 16
You can use a SAS format or a user_created format when you display a value with the EXAMINE command
 For example, assume the variable BEGIN contains a SAS date value
 To display the day of the week and date, use the SAS WEEKDATEw
 format with EXAMINE
When the value of BEGIN is 033001, the debugger displays
When the value of BEGIN is 033001, the debugger displays
As another example, you can create a format named SIZE
As another example, you can create a format named SIZE
 to the variable STOCKNUM, use the format with EXAMINE
When the value of STOCKNUM is 7, for example, the debugger displays
When the value of STOCKNUM is 7, for example, the debugger displays
Copyright 1999 by SAS Institute Inc
, Cary, NC, USA
 All rights reserved
Starting out
Get the Ebook Get Started with C or C   Getting a Compiler Book Recommendations
Tutorials
C Tutorial C   Tutorial Java Tutorial Game Programming Graphics Programming Algorithms   Data Structures Debugging All Tutorials
Practice
Practice Problems Quizzes
Resources
Source Code Source Code Snippets C and C   Tips Finding a Job
References
Function Reference Syntax Reference Programming FAQ
Getting Help
Message Board Email About Us
A good debugger is one of the most important tools in a programmer s toolkit
A good debugger is one of the most important tools in a programmer s toolkit
 On a UNIX or Linux system, GDB is a powerful and popular debugging tool  it lets you do whatever you like with your program running under GDB
Should you read this  You have a general idea of programming with C or C  
 You put a lot of cout or printf statements in the code if something goes wrong
 You put a lot of cout or printf statements in the code if something goes wrong
 You have used a debugger with an IDE, and are curious about how the command line works
Gcc is the de facto compiler in Linux or any other  nix system
 It also has Windows ports but on Windows, you ll probably find the debugger in Visual Studio  easier 
Suppose you have a file called main
cpp containing your c   code
So the final command turns into
 If you re wondering what _Wall and _Werror are, you may find this page on GCC a useful read
 
Don t worry if it looks cumbersome, you ll get used to it   If you ve got multiple source files you should use a good build system like make or Scons
 
Provided you ve compiled your program with the debugging symbols enabled, you re ready to start debugging
 Any time there is text you should replace, I ve put it in  angle brackets 
 The line at which you want the program to temporarily stop is called the breakpoint
When the program is stopped, you can do a number of important things, but most importantly you need to see which part of the code you ve stopped
When the program is stopped, you can do a number of important things, but most importantly you need to see which part of the code you ve stopped
 The command for this purpose is  list 
Just starting and stopping isn t much of a control
 GDB also lets you to run the program line_by_line by the commands  next  and  step 
 GDB also lets you to run the program line_by_line by the commands  next  and  step 
 There is a little difference between the two, though
 Next keeps the control strictly in the current scope whereas step follows the execution through function calls
Look at this example carefully 
Suppose you have a line in the code like
Suppose you have a line in the code like
If you use the next command, the line gets executed and the control advances to the next line, readinput, where you can perhaps examine  value  to get an idea of how displayworked
But if you use the step command, you get to follow what displaydoes directly, and the control advances to the first line of display, wherever it is
 To examine a variable, just use
Note
You can modify variables to see if an issue is resolved if the variable has another value or to force the program to follow a particular path to see if the reason for a bug was due to a variable having the wrong value
Setting watchpoints is like asking the debugger to provide you with a running commentary of any changes that happen to the variables
Setting watchpoints is like asking the debugger to provide you with a running commentary of any changes that happen to the variables
 Whenever a change occurs, the program pauses and provides you with the details of the change
The command to set a simple watchpoint  a write watchpoint, i
Note
 You can only set watchpoints for a variable when it is in scope
Now follow the commands and the outputs carefully, especially the watchpoints
 What I m doing is basically
 Setting a breakpoint just in the line of the function call
 Stepping into the function from that line
 Setting watchpoints for both the result of the calculation and the input number as it changes
You have now seen enough to try GBD out on your own
 Some important topics have not been touched upon here for the sake of simplicity, such as dealing with segmentation faults and other kinds of crashes or using tools like Valgrind to find memory leaks
Remember that GDB comes built in with an excellent help system
 Just type help in the prompt and you will be presented with options of what you could need help with
 For details about a specific command, use the syntax
After learning about GDB, you do not have to panic the next time your program goes crazy
 You have an excellent weapon in your arsenal now
Exactly how to get started with C   today
C Tutorial
C   Tutorial
5 ways you can learn to program faster
The 5 Most Common Problems New Programmers Face
How to set up a compiler
8 Common programming Mistakes
What is C  11 
How to make a game in 48 hours
How to create a shared library on Linux with GCC _ December 30, 2011
Enum classes and nullptr in C  11 _ November 27, 2011
Learn about The Hash Table _ November 20, 2011
Rvalue References and Move Semantics in C  11 _ November 13, 2011
Rvalue References and Move Semantics in C  11 _ November 13, 2011
C and C   for Java Programmers _ November 5, 2011
A Gentle Introduction to C   IO Streams _ October 10, 2011
