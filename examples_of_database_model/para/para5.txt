The hierarchical structure was developed by IBM in the 1960s, and used in early mainframe DBMS. Records' relationships form a treelike model. This structure is simple but inflexible because the relationship is confined to a one-to-many relationship. The IBM Information Management System (IMS) and the RDM Mobile are examples of a hierarchical database system with multiple hierarchies over the same data. RDM Mobile is a newly designed embedded database for a mobile computer system.
The hierarchical structure was developed by IBM in the 1960s, and used in early mainframe DBMS. Records' relationships form a treelike model. This structure is simple but inflexible because the relationship is confined to a one-to-many relationship. The IBM Information Management System (IMS) and the RDM Mobile are examples of a hierarchical database system with multiple hierarchies over the same data. RDM Mobile is a newly designed embedded database for a mobile computer system.
The hierarchical structure was developed by IBM in the 1960s, and used in early mainframe DBMS. Records' relationships form a treelike model. This structure is simple but inflexible because the relationship is confined to a one-to-many relationship. The IBM Information Management System (IMS) and the RDM Mobile are examples of a hierarchical database system with multiple hierarchies over the same data. RDM Mobile is a newly designed embedded database for a mobile computer system.
The hierarchical structure was developed by IBM in the 1960s, and used in early mainframe DBMS. Records' relationships form a treelike model. This structure is simple but inflexible because the relationship is confined to a one-to-many relationship. The IBM Information Management System (IMS) and the RDM Mobile are examples of a hierarchical database system with multiple hierarchies over the same data. RDM Mobile is a newly designed embedded database for a mobile computer system.
The hierarchical structure was developed by IBM in the 1960s, and used in early mainframe DBMS. Records' relationships form a treelike model. This structure is simple but inflexible because the relationship is confined to a one-to-many relationship. The IBM Information Management System (IMS) and the RDM Mobile are examples of a hierarchical database system with multiple hierarchies over the same data. RDM Mobile is a newly designed embedded database for a mobile computer system.
v t e
v t e
v t e


The hierarchical structure was developed by IBM in the 1960s, and used in early mainframe DBMS. Records' relationships form a treelike model. This structure is simple but inflexible because the relationship is confined to a one-to-many relationship. The IBM Information Management System (IMS) and the RDM Mobile are examples of a hierarchical database system with multiple hierarchies over the same data. RDM Mobile is a newly designed embedded database for a mobile computer system.
The hierarchical structure was developed by IBM in the 1960s, and used in early mainframe DBMS. Records' relationships form a treelike model. This structure is simple but inflexible because the relationship is confined to a one-to-many relationship. The IBM Information Management System (IMS) and the RDM Mobile are examples of a hierarchical database system with multiple hierarchies over the same data. RDM Mobile is a newly designed embedded database for a mobile computer system.
The hierarchical structure was developed by IBM in the 1960s, and used in early mainframe DBMS. Records' relationships form a treelike model. This structure is simple but inflexible because the relationship is confined to a one-to-many relationship. The IBM Information Management System (IMS) and the RDM Mobile are examples of a hierarchical database system with multiple hierarchies over the same data. RDM Mobile is a newly designed embedded database for a mobile computer system.
The hierarchical structure was developed by IBM in the 1960s, and used in early mainframe DBMS. Records' relationships form a treelike model. This structure is simple but inflexible because the relationship is confined to a one-to-many relationship. The IBM Information Management System (IMS) and the RDM Mobile are examples of a hierarchical database system with multiple hierarchies over the same data. RDM Mobile is a newly designed embedded database for a mobile computer system.
The hierarchical structure was developed by IBM in the 1960s, and used in early mainframe DBMS. Records' relationships form a treelike model. This structure is simple but inflexible because the relationship is confined to a one-to-many relationship. The IBM Information Management System (IMS) and the RDM Mobile are examples of a hierarchical database system with multiple hierarchies over the same data. RDM Mobile is a newly designed embedded database for a mobile computer system.
v t e
v t e
v t e


For example, the following is the hierarchical schema of a company database:
In hierarchical model, data is organized into a tree like structure with each record is having one parent record and many children. The main drawback of this model is that, it can have only one to many relationships between nodes.
In hierarchical model, data is organized into a tree like structure with each record is having one parent record and many children. The main drawback of this model is that, it can have only one to many relationships between nodes.
Example of hierarchical data represented as relational tables: The above hierarchical model can be represented as relational tables like this:
Example of hierarchical data represented as relational tables: The above hierarchical model can be represented as relational tables like this:
The hierarchical model was the first database model developed to overcome the limitations of the traditional file system.  Hierarchical databases were predominantly used for transaction processing where the volume of transactions is large and the transaction operations change little over time.  For example, the hierarchical database model was particularly popular with banks, because, the way in which banks process savings transactions seldom varies. 
The hierarchical model was the first database model developed to overcome the limitations of the traditional file system.  Hierarchical databases were predominantly used for transaction processing where the volume of transactions is large and the transaction operations change little over time.  For example, the hierarchical database model was particularly popular with banks, because, the way in which banks process savings transactions seldom varies. 
The hierarchical model was the first database model developed to overcome the limitations of the traditional file system.  Hierarchical databases were predominantly used for transaction processing where the volume of transactions is large and the transaction operations change little over time.  For example, the hierarchical database model was particularly popular with banks, because, the way in which banks process savings transactions seldom varies. 
The hierarchical model was the first database model developed to overcome the limitations of the traditional file system.  Hierarchical databases were predominantly used for transaction processing where the volume of transactions is large and the transaction operations change little over time.  For example, the hierarchical database model was particularly popular with banks, because, the way in which banks process savings transactions seldom varies. 
    
    
By admin July 29, 2015 Data Models,Database,Question Bank of DBMS
By admin July 29, 2015 Data Models,Database,Question Bank of DBMS
By admin July 29, 2015 Data Models,Database,Question Bank of DBMS
Database DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close Close Question Bank of DBMS DBMS GATE Questions GATE Questions Yearwise Gate 2003 Gate 2004 Gate 2005 Gate 2006 Gate 2007 Gate 2008 Gate 2009 Gate 2010 GATE Questions Topicwise ER, Relational Model and Algebra(1997-2008) Normalization 1997 – 2008 SQL (1997 – 2008) Transaction Management (1997-2008) B+ Trees – 1997 – 2008 Close Practice Questions A Mix of Relational Model, Relational Algebra, ER Model, and SQL Level 1 Questions – Set 1 Level 1 Questions – Set-2 Level 2 Questions Level 3 Questions Normalization and Transaction Management Questions on Normalisation Questions on Transaction Management SQL and File Organisation - B+Trees SQL – Level 1 Questions SQL – Level 2 and Level 3 Questions File Organization – Level 1 File Organisation – Level 2 and 3 Close Some Solved Questions on DBMS ER Model, Relational Model, Relational Algebra & Calculus ER Diagram – 1 ER Diagram – 2 Conversion of ERM to RM Relational Algebra – 1 Relational Algebra – 2 Relational Calculus Questions on SQL SQL – 1 SQL – 2 SQL – 3 SQL – 4 SQL – 5 SQL – 6 Queries on SQL Operators – 1 Queries on SQL Operators – 2 Close Close C and C++ Introduction Basics Basics of C++ My First Program in C and C++ – Explanation Input/Output Types of errors Data Types, Modifiers, Variables and Constants Data types Data Type Modifiers Variables and Constants Close Operators & Expressions Types of Operators What are Operators?? Arithmetic Operators Increment/ Decrement Relational Operators Shift Operators Logical Operators Bitwise Operators Conditional Operators Assignment Operators and C++ Shorthands Some Other Operators Expressions, Type Conversion and Type Casting What are Expressions?? Type Conversion and Type Casting Close Flow of Control Statements and its Flow Control Selection Statements If and Switch Statement Difference Between If Else and Conditional Operator Switch Statement Difference Between if and switch Iteration Statements For Loop While and Do while Loops Difference Between for, while and do while Loop Nested Loops with example Close C++ for GATE Pointers Pointers in C for GATE Students Basic Programs on Pointers in C for Gate Students Arithmetic Operations on Pointers for GATE Students Arrays & Pointers Pointer to Array or Access Multidimensional Arrays Using Pointers Arrays and Pointers in C Examples for GATE Students Programs on Pointer to Array Structure & Pointers Pointer to Structure – Basics Pointer to Structure Example Functions and Pointers Function Pointer in C Close Miscellaneous Topics How Integer Data Type is Stored in Memory ? Memory Layout in c Memory Layout of C++ Dynamic Memory Allocation in C with Example Close Close Operating system Introduction – Basics Introduction - Basics Operating System and their goals, System Calls Types of Operating System Close Process Management Process Management Process management in Operating System Process State diagram Process Categorisation on the basis of execution time Degree Of Multiprogramming Types of Scheduler and Scheduling Criterias Types of Scheduler OS – Questions Scheduling Criteria CPU Scheduling Questions on CPU Scheduling(FCFS) Questions on CPU scheduling(SJF) Questions on CPU Scheduling(SRTF) Questions on CPU Scheduling(LJF_Non Preemptive) Longest Remaining Time First (LRTF)-Questions Questions on Round Robin Scheduling Close Close MBA 4th Semester Entrepreneurship Development Introduction to Entrepreneurship Characteristics of an Entrepreneur Qualities of an Entrepreneur Entrepreneurship and Intrapreneurship Entrepreneurship and Economic Development Role of Entrepreneurs in Economic Development of a Country Procedure To Start Up Your Own Business Methods to Expand Your Business Life Cycle of New Business Start up a Small Scale Entrepreneurship Small Business and Large Business Relationship Rural entrepreneurship Ethics and Entrepreneurship Entrepreneurship Development Programme Problems Faced by EDPs Close Close
Database DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close Close Question Bank of DBMS DBMS GATE Questions GATE Questions Yearwise Gate 2003 Gate 2004 Gate 2005 Gate 2006 Gate 2007 Gate 2008 Gate 2009 Gate 2010 GATE Questions Topicwise ER, Relational Model and Algebra(1997-2008) Normalization 1997 – 2008 SQL (1997 – 2008) Transaction Management (1997-2008) B+ Trees – 1997 – 2008 Close Practice Questions A Mix of Relational Model, Relational Algebra, ER Model, and SQL Level 1 Questions – Set 1 Level 1 Questions – Set-2 Level 2 Questions Level 3 Questions Normalization and Transaction Management Questions on Normalisation Questions on Transaction Management SQL and File Organisation - B+Trees SQL – Level 1 Questions SQL – Level 2 and Level 3 Questions File Organization – Level 1 File Organisation – Level 2 and 3 Close Some Solved Questions on DBMS ER Model, Relational Model, Relational Algebra & Calculus ER Diagram – 1 ER Diagram – 2 Conversion of ERM to RM Relational Algebra – 1 Relational Algebra – 2 Relational Calculus Questions on SQL SQL – 1 SQL – 2 SQL – 3 SQL – 4 SQL – 5 SQL – 6 Queries on SQL Operators – 1 Queries on SQL Operators – 2 Close Close C and C++ Introduction Basics Basics of C++ My First Program in C and C++ – Explanation Input/Output Types of errors Data Types, Modifiers, Variables and Constants Data types Data Type Modifiers Variables and Constants Close Operators & Expressions Types of Operators What are Operators?? Arithmetic Operators Increment/ Decrement Relational Operators Shift Operators Logical Operators Bitwise Operators Conditional Operators Assignment Operators and C++ Shorthands Some Other Operators Expressions, Type Conversion and Type Casting What are Expressions?? Type Conversion and Type Casting Close Flow of Control Statements and its Flow Control Selection Statements If and Switch Statement Difference Between If Else and Conditional Operator Switch Statement Difference Between if and switch Iteration Statements For Loop While and Do while Loops Difference Between for, while and do while Loop Nested Loops with example Close C++ for GATE Pointers Pointers in C for GATE Students Basic Programs on Pointers in C for Gate Students Arithmetic Operations on Pointers for GATE Students Arrays & Pointers Pointer to Array or Access Multidimensional Arrays Using Pointers Arrays and Pointers in C Examples for GATE Students Programs on Pointer to Array Structure & Pointers Pointer to Structure – Basics Pointer to Structure Example Functions and Pointers Function Pointer in C Close Miscellaneous Topics How Integer Data Type is Stored in Memory ? Memory Layout in c Memory Layout of C++ Dynamic Memory Allocation in C with Example Close Close Operating system Introduction – Basics Introduction - Basics Operating System and their goals, System Calls Types of Operating System Close Process Management Process Management Process management in Operating System Process State diagram Process Categorisation on the basis of execution time Degree Of Multiprogramming Types of Scheduler and Scheduling Criterias Types of Scheduler OS – Questions Scheduling Criteria CPU Scheduling Questions on CPU Scheduling(FCFS) Questions on CPU scheduling(SJF) Questions on CPU Scheduling(SRTF) Questions on CPU Scheduling(LJF_Non Preemptive) Longest Remaining Time First (LRTF)-Questions Questions on Round Robin Scheduling Close Close MBA 4th Semester Entrepreneurship Development Introduction to Entrepreneurship Characteristics of an Entrepreneur Qualities of an Entrepreneur Entrepreneurship and Intrapreneurship Entrepreneurship and Economic Development Role of Entrepreneurs in Economic Development of a Country Procedure To Start Up Your Own Business Methods to Expand Your Business Life Cycle of New Business Start up a Small Scale Entrepreneurship Small Business and Large Business Relationship Rural entrepreneurship Ethics and Entrepreneurship Entrepreneurship Development Programme Problems Faced by EDPs Close Close
Database DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close Close Question Bank of DBMS DBMS GATE Questions GATE Questions Yearwise Gate 2003 Gate 2004 Gate 2005 Gate 2006 Gate 2007 Gate 2008 Gate 2009 Gate 2010 GATE Questions Topicwise ER, Relational Model and Algebra(1997-2008) Normalization 1997 – 2008 SQL (1997 – 2008) Transaction Management (1997-2008) B+ Trees – 1997 – 2008 Close Practice Questions A Mix of Relational Model, Relational Algebra, ER Model, and SQL Level 1 Questions – Set 1 Level 1 Questions – Set-2 Level 2 Questions Level 3 Questions Normalization and Transaction Management Questions on Normalisation Questions on Transaction Management SQL and File Organisation - B+Trees SQL – Level 1 Questions SQL – Level 2 and Level 3 Questions File Organization – Level 1 File Organisation – Level 2 and 3 Close Some Solved Questions on DBMS ER Model, Relational Model, Relational Algebra & Calculus ER Diagram – 1 ER Diagram – 2 Conversion of ERM to RM Relational Algebra – 1 Relational Algebra – 2 Relational Calculus Questions on SQL SQL – 1 SQL – 2 SQL – 3 SQL – 4 SQL – 5 SQL – 6 Queries on SQL Operators – 1 Queries on SQL Operators – 2 Close Close C and C++ Introduction Basics Basics of C++ My First Program in C and C++ – Explanation Input/Output Types of errors Data Types, Modifiers, Variables and Constants Data types Data Type Modifiers Variables and Constants Close Operators & Expressions Types of Operators What are Operators?? Arithmetic Operators Increment/ Decrement Relational Operators Shift Operators Logical Operators Bitwise Operators Conditional Operators Assignment Operators and C++ Shorthands Some Other Operators Expressions, Type Conversion and Type Casting What are Expressions?? Type Conversion and Type Casting Close Flow of Control Statements and its Flow Control Selection Statements If and Switch Statement Difference Between If Else and Conditional Operator Switch Statement Difference Between if and switch Iteration Statements For Loop While and Do while Loops Difference Between for, while and do while Loop Nested Loops with example Close C++ for GATE Pointers Pointers in C for GATE Students Basic Programs on Pointers in C for Gate Students Arithmetic Operations on Pointers for GATE Students Arrays & Pointers Pointer to Array or Access Multidimensional Arrays Using Pointers Arrays and Pointers in C Examples for GATE Students Programs on Pointer to Array Structure & Pointers Pointer to Structure – Basics Pointer to Structure Example Functions and Pointers Function Pointer in C Close Miscellaneous Topics How Integer Data Type is Stored in Memory ? Memory Layout in c Memory Layout of C++ Dynamic Memory Allocation in C with Example Close Close Operating system Introduction – Basics Introduction - Basics Operating System and their goals, System Calls Types of Operating System Close Process Management Process Management Process management in Operating System Process State diagram Process Categorisation on the basis of execution time Degree Of Multiprogramming Types of Scheduler and Scheduling Criterias Types of Scheduler OS – Questions Scheduling Criteria CPU Scheduling Questions on CPU Scheduling(FCFS) Questions on CPU scheduling(SJF) Questions on CPU Scheduling(SRTF) Questions on CPU Scheduling(LJF_Non Preemptive) Longest Remaining Time First (LRTF)-Questions Questions on Round Robin Scheduling Close Close MBA 4th Semester Entrepreneurship Development Introduction to Entrepreneurship Characteristics of an Entrepreneur Qualities of an Entrepreneur Entrepreneurship and Intrapreneurship Entrepreneurship and Economic Development Role of Entrepreneurs in Economic Development of a Country Procedure To Start Up Your Own Business Methods to Expand Your Business Life Cycle of New Business Start up a Small Scale Entrepreneurship Small Business and Large Business Relationship Rural entrepreneurship Ethics and Entrepreneurship Entrepreneurship Development Programme Problems Faced by EDPs Close Close
Database DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close Close Question Bank of DBMS DBMS GATE Questions GATE Questions Yearwise Gate 2003 Gate 2004 Gate 2005 Gate 2006 Gate 2007 Gate 2008 Gate 2009 Gate 2010 GATE Questions Topicwise ER, Relational Model and Algebra(1997-2008) Normalization 1997 – 2008 SQL (1997 – 2008) Transaction Management (1997-2008) B+ Trees – 1997 – 2008 Close Practice Questions A Mix of Relational Model, Relational Algebra, ER Model, and SQL Level 1 Questions – Set 1 Level 1 Questions – Set-2 Level 2 Questions Level 3 Questions Normalization and Transaction Management Questions on Normalisation Questions on Transaction Management SQL and File Organisation - B+Trees SQL – Level 1 Questions SQL – Level 2 and Level 3 Questions File Organization – Level 1 File Organisation – Level 2 and 3 Close Some Solved Questions on DBMS ER Model, Relational Model, Relational Algebra & Calculus ER Diagram – 1 ER Diagram – 2 Conversion of ERM to RM Relational Algebra – 1 Relational Algebra – 2 Relational Calculus Questions on SQL SQL – 1 SQL – 2 SQL – 3 SQL – 4 SQL – 5 SQL – 6 Queries on SQL Operators – 1 Queries on SQL Operators – 2 Close Close C and C++ Introduction Basics Basics of C++ My First Program in C and C++ – Explanation Input/Output Types of errors Data Types, Modifiers, Variables and Constants Data types Data Type Modifiers Variables and Constants Close Operators & Expressions Types of Operators What are Operators?? Arithmetic Operators Increment/ Decrement Relational Operators Shift Operators Logical Operators Bitwise Operators Conditional Operators Assignment Operators and C++ Shorthands Some Other Operators Expressions, Type Conversion and Type Casting What are Expressions?? Type Conversion and Type Casting Close Flow of Control Statements and its Flow Control Selection Statements If and Switch Statement Difference Between If Else and Conditional Operator Switch Statement Difference Between if and switch Iteration Statements For Loop While and Do while Loops Difference Between for, while and do while Loop Nested Loops with example Close C++ for GATE Pointers Pointers in C for GATE Students Basic Programs on Pointers in C for Gate Students Arithmetic Operations on Pointers for GATE Students Arrays & Pointers Pointer to Array or Access Multidimensional Arrays Using Pointers Arrays and Pointers in C Examples for GATE Students Programs on Pointer to Array Structure & Pointers Pointer to Structure – Basics Pointer to Structure Example Functions and Pointers Function Pointer in C Close Miscellaneous Topics How Integer Data Type is Stored in Memory ? Memory Layout in c Memory Layout of C++ Dynamic Memory Allocation in C with Example Close Close Operating system Introduction – Basics Introduction - Basics Operating System and their goals, System Calls Types of Operating System Close Process Management Process Management Process management in Operating System Process State diagram Process Categorisation on the basis of execution time Degree Of Multiprogramming Types of Scheduler and Scheduling Criterias Types of Scheduler OS – Questions Scheduling Criteria CPU Scheduling Questions on CPU Scheduling(FCFS) Questions on CPU scheduling(SJF) Questions on CPU Scheduling(SRTF) Questions on CPU Scheduling(LJF_Non Preemptive) Longest Remaining Time First (LRTF)-Questions Questions on Round Robin Scheduling Close Close MBA 4th Semester Entrepreneurship Development Introduction to Entrepreneurship Characteristics of an Entrepreneur Qualities of an Entrepreneur Entrepreneurship and Intrapreneurship Entrepreneurship and Economic Development Role of Entrepreneurs in Economic Development of a Country Procedure To Start Up Your Own Business Methods to Expand Your Business Life Cycle of New Business Start up a Small Scale Entrepreneurship Small Business and Large Business Relationship Rural entrepreneurship Ethics and Entrepreneurship Entrepreneurship Development Programme Problems Faced by EDPs Close Close
Database DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close Close Question Bank of DBMS DBMS GATE Questions GATE Questions Yearwise Gate 2003 Gate 2004 Gate 2005 Gate 2006 Gate 2007 Gate 2008 Gate 2009 Gate 2010 GATE Questions Topicwise ER, Relational Model and Algebra(1997-2008) Normalization 1997 – 2008 SQL (1997 – 2008) Transaction Management (1997-2008) B+ Trees – 1997 – 2008 Close Practice Questions A Mix of Relational Model, Relational Algebra, ER Model, and SQL Level 1 Questions – Set 1 Level 1 Questions – Set-2 Level 2 Questions Level 3 Questions Normalization and Transaction Management Questions on Normalisation Questions on Transaction Management SQL and File Organisation - B+Trees SQL – Level 1 Questions SQL – Level 2 and Level 3 Questions File Organization – Level 1 File Organisation – Level 2 and 3 Close Some Solved Questions on DBMS ER Model, Relational Model, Relational Algebra & Calculus ER Diagram – 1 ER Diagram – 2 Conversion of ERM to RM Relational Algebra – 1 Relational Algebra – 2 Relational Calculus Questions on SQL SQL – 1 SQL – 2 SQL – 3 SQL – 4 SQL – 5 SQL – 6 Queries on SQL Operators – 1 Queries on SQL Operators – 2 Close Close C and C++ Introduction Basics Basics of C++ My First Program in C and C++ – Explanation Input/Output Types of errors Data Types, Modifiers, Variables and Constants Data types Data Type Modifiers Variables and Constants Close Operators & Expressions Types of Operators What are Operators?? Arithmetic Operators Increment/ Decrement Relational Operators Shift Operators Logical Operators Bitwise Operators Conditional Operators Assignment Operators and C++ Shorthands Some Other Operators Expressions, Type Conversion and Type Casting What are Expressions?? Type Conversion and Type Casting Close Flow of Control Statements and its Flow Control Selection Statements If and Switch Statement Difference Between If Else and Conditional Operator Switch Statement Difference Between if and switch Iteration Statements For Loop While and Do while Loops Difference Between for, while and do while Loop Nested Loops with example Close C++ for GATE Pointers Pointers in C for GATE Students Basic Programs on Pointers in C for Gate Students Arithmetic Operations on Pointers for GATE Students Arrays & Pointers Pointer to Array or Access Multidimensional Arrays Using Pointers Arrays and Pointers in C Examples for GATE Students Programs on Pointer to Array Structure & Pointers Pointer to Structure – Basics Pointer to Structure Example Functions and Pointers Function Pointer in C Close Miscellaneous Topics How Integer Data Type is Stored in Memory ? Memory Layout in c Memory Layout of C++ Dynamic Memory Allocation in C with Example Close Close Operating system Introduction – Basics Introduction - Basics Operating System and their goals, System Calls Types of Operating System Close Process Management Process Management Process management in Operating System Process State diagram Process Categorisation on the basis of execution time Degree Of Multiprogramming Types of Scheduler and Scheduling Criterias Types of Scheduler OS – Questions Scheduling Criteria CPU Scheduling Questions on CPU Scheduling(FCFS) Questions on CPU scheduling(SJF) Questions on CPU Scheduling(SRTF) Questions on CPU Scheduling(LJF_Non Preemptive) Longest Remaining Time First (LRTF)-Questions Questions on Round Robin Scheduling Close Close MBA 4th Semester Entrepreneurship Development Introduction to Entrepreneurship Characteristics of an Entrepreneur Qualities of an Entrepreneur Entrepreneurship and Intrapreneurship Entrepreneurship and Economic Development Role of Entrepreneurs in Economic Development of a Country Procedure To Start Up Your Own Business Methods to Expand Your Business Life Cycle of New Business Start up a Small Scale Entrepreneurship Small Business and Large Business Relationship Rural entrepreneurship Ethics and Entrepreneurship Entrepreneurship Development Programme Problems Faced by EDPs Close Close
DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close Close
DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close Close
DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close
DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close
DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close
DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close
DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close
DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close
DBMS Introduction & ER Models Introduction to Database and DBMS Database and DBMS – Intro DBMS vs File System and Disadvantages of File System Advantages and Disadvantage of DBMS Components of DBMS Execution Steps of DBMS Architecture of DBMS ER Diagrams and ER Models ER Model Type of Attributes with Example Types of Relationships Relationship Constraints Entity and its Types Composite Entity with Example Supertype and Subtype with Example Identifying and Non Identifying Relationships Generalization Specialization and Aggregation How to Draw ER Diagram – Steps ?? ER Diagram Examples – Set 1 ER Diagram Examples – Set – 2 Close Data Models & Database Keys Data Models in DBMS Data Models Hierarchical Model Network Model ER MODEL Relational Model Schema and Instance of Database Relational Database Database Keys in DBMS Keys in DBMS Questions on Super Keys and Candidate Keys Close Constraints in DBMS Types of Constraints or Relational Constraints Constraint violations during insert operation Constraint Violations during delete operation Constraint Violations during Update Operations Questions on Constraint Violations – Close Functional Dependency & their Applications Functional Dependencies and their Types Functional Dependency with Examples Types of Functional Dependency Trivial and Non Trivial FD Inference Rules For FD Applications of Functional Dependencies Closure of FD FD Set Closure (F+) Membership Test for FD Finding Super Key From FD Finding Candidate Key using FD Questions on Super Keys and Candidate Keys Prime and Non Prime Attributes Equivalence of Sets of FD Minimal Cover/Canonical Cover Minimal Cover – Questions Close Normalization & Normal Forms Normalization Normalisation Lossless Join Questions on Lossless Join Lossy Join Decomposition Dependency Preserving Decomposition Question on Dependency Preserving Decomposition Normal Forms and Classification of Dependencies 1NF 2NF 3NF BCNF Multivalued Dependency Join Dependencies and 5NF Classification of Dependencies Normal Forms Shortcuts for Gate Students Questions on Normal Forms Question 1 Question 2 Question 3 Question 4 Question 5 Close SQL, Relational Algebra & Calculus SQL and Some Questions SQL DDL Commands DML Commands DCL Commands Integrity Constraints Primary Key and Foreign Key Constraint Complete Format of SELECT Command Query and Subquery in SQL Operators in SQL with Example SQL Like Operator Queries on SQL Operators Joins in SQL Create View Command Questions on SQL Set 1 Set 2 Set 3 Set 4 Set 5 Set 6 Relational Algebra Relational Algebra Questions – Set 1 Questions – Set 2 Relational Calculus & some Questions Close Transaction in DBMS What is a Transaction in DBMS ? ACID Properties Serial and Concurrent Schedule Concurrency Problems in Transaction Classification of schedule based on recovery How to check for Conflict Serializable Schedule ? Implementation of Transaction in SQL Concurrency Control Protocol Serializability in Database How to check for View Serializable Schedule ? Questions on Conflict Serializable Questions on View Serializable Difference between conflict and view equivalent Binary Locks Shared and Exclusive Locks 2 Phase Locking Deadlock in Transaction Starvation in Deadlock (Livelock) Timestamp Ordering Protocols Thomas write rule Questions on Timestamp Ordering Multiple Granularity Locking Protocol Close
In figure 1, the node at level 1 is called the root node and the nodes at that has no children are called leaves. For example, node 4, 5, 7, 8, 9, 10 and 11. Nodes that are children of the same parent are called siblings. For example, nodes 2, 3, 4 are siblings. For any node there is a single path called the hierarchical path from the root node. The nodes along this path are called that nodes ancestors. Similarly for a given node, any node along a path from that node to leaf is called its descendent. For example, suppose we have to find out the hierarchical path of node 10, then it will be 1→2→6→10 and the ancestors of node 10 are 1, 2 and 6. The height of tree is the number of levels on the longest hierarchical path from the root to a leaf. The above tree has a height= 4. A tree is said to be balanced if every path from the root node to a leaf has the same length.
In figure 1, the node at level 1 is called the root node and the nodes at that has no children are called leaves. For example, node 4, 5, 7, 8, 9, 10 and 11. Nodes that are children of the same parent are called siblings. For example, nodes 2, 3, 4 are siblings. For any node there is a single path called the hierarchical path from the root node. The nodes along this path are called that nodes ancestors. Similarly for a given node, any node along a path from that node to leaf is called its descendent. For example, suppose we have to find out the hierarchical path of node 10, then it will be 1→2→6→10 and the ancestors of node 10 are 1, 2 and 6. The height of tree is the number of levels on the longest hierarchical path from the root to a leaf. The above tree has a height= 4. A tree is said to be balanced if every path from the root node to a leaf has the same length.
In figure 1, the node at level 1 is called the root node and the nodes at that has no children are called leaves. For example, node 4, 5, 7, 8, 9, 10 and 11. Nodes that are children of the same parent are called siblings. For example, nodes 2, 3, 4 are siblings. For any node there is a single path called the hierarchical path from the root node. The nodes along this path are called that nodes ancestors. Similarly for a given node, any node along a path from that node to leaf is called its descendent. For example, suppose we have to find out the hierarchical path of node 10, then it will be 1→2→6→10 and the ancestors of node 10 are 1, 2 and 6. The height of tree is the number of levels on the longest hierarchical path from the root to a leaf. The above tree has a height= 4. A tree is said to be balanced if every path from the root node to a leaf has the same length.
In figure 1, the node at level 1 is called the root node and the nodes at that has no children are called leaves. For example, node 4, 5, 7, 8, 9, 10 and 11. Nodes that are children of the same parent are called siblings. For example, nodes 2, 3, 4 are siblings. For any node there is a single path called the hierarchical path from the root node. The nodes along this path are called that nodes ancestors. Similarly for a given node, any node along a path from that node to leaf is called its descendent. For example, suppose we have to find out the hierarchical path of node 10, then it will be 1→2→6→10 and the ancestors of node 10 are 1, 2 and 6. The height of tree is the number of levels on the longest hierarchical path from the root to a leaf. The above tree has a height= 4. A tree is said to be balanced if every path from the root node to a leaf has the same length.
In figure 1, the node at level 1 is called the root node and the nodes at that has no children are called leaves. For example, node 4, 5, 7, 8, 9, 10 and 11. Nodes that are children of the same parent are called siblings. For example, nodes 2, 3, 4 are siblings. For any node there is a single path called the hierarchical path from the root node. The nodes along this path are called that nodes ancestors. Similarly for a given node, any node along a path from that node to leaf is called its descendent. For example, suppose we have to find out the hierarchical path of node 10, then it will be 1→2→6→10 and the ancestors of node 10 are 1, 2 and 6. The height of tree is the number of levels on the longest hierarchical path from the root to a leaf. The above tree has a height= 4. A tree is said to be balanced if every path from the root node to a leaf has the same length.
In figure 1, the node at level 1 is called the root node and the nodes at that has no children are called leaves. For example, node 4, 5, 7, 8, 9, 10 and 11. Nodes that are children of the same parent are called siblings. For example, nodes 2, 3, 4 are siblings. For any node there is a single path called the hierarchical path from the root node. The nodes along this path are called that nodes ancestors. Similarly for a given node, any node along a path from that node to leaf is called its descendent. For example, suppose we have to find out the hierarchical path of node 10, then it will be 1→2→6→10 and the ancestors of node 10 are 1, 2 and 6. The height of tree is the number of levels on the longest hierarchical path from the root to a leaf. The above tree has a height= 4. A tree is said to be balanced if every path from the root node to a leaf has the same length.
In figure 1, the node at level 1 is called the root node and the nodes at that has no children are called leaves. For example, node 4, 5, 7, 8, 9, 10 and 11. Nodes that are children of the same parent are called siblings. For example, nodes 2, 3, 4 are siblings. For any node there is a single path called the hierarchical path from the root node. The nodes along this path are called that nodes ancestors. Similarly for a given node, any node along a path from that node to leaf is called its descendent. For example, suppose we have to find out the hierarchical path of node 10, then it will be 1→2→6→10 and the ancestors of node 10 are 1, 2 and 6. The height of tree is the number of levels on the longest hierarchical path from the root to a leaf. The above tree has a height= 4. A tree is said to be balanced if every path from the root node to a leaf has the same length.
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 















The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 
The Hierarchical Data Model is a way of organizing a database with multiple one to many relationships.  The structure is based on the rule that one parent can have many children but children are allowed only one parent.  This structure allows information to be repeated through the parent child relations created by IBM and was implemented mainly in their Information Management System. (IMF), the precursor to the DBMS.  Advantages: The model allows easy addition and deletion of new information.  Data at the top of the Hierarchy is very fast to access.  It was very easy to work with the model because it worked well with linear type data storage such as tapes.  The model relates very well to natural hierarchies such as assembly plants and employee organization in corporations.  It relates well to anything that works through a one to many relationship.  For example; there is a president with many managers below them, and those managers have many employees below them, but each employee has only one manager. ga1111 Disadvantages: This model has many issues that hold it back now that we require more sophisticated relationships.  It requires data to be repetitively stored in many different entities.  The database can be very slow when searching for information on the lower entities.  We no longer use linear data storage mediums such as tapes so that advantage is null.  Searching for data requires the DBMS to run through the entire model from top to bottom until the required information is found, making queries very slow.  Can only model one to many relationships, many to many relationships are not supported.  Clever manipulation of the model are required to make many to may relationships.  For example; what if a professor teaches classes, and is also a graduate student? 















Figure 2-5   A sample hierarchical chart
                    
The earliest model was the hierarchical database model, resembling an upside-down tree. Files are related in a parent-child manner, with each parent capable of relating to more than one child, but each child only being related to one parent. Most of you will be familiar with this kind of structure—it’s the way most file systems work. There is usually a root, or top-level, directory that contains various other directories and files. Each subdirectory can then contain more files and directories, and so on. Each file or directory can only exist in one directory itself—it only has one parent. As you can see in the image below A1 is the root directory, and its children are B1 and B2. B1 is a parent to C1, C2, and C3, which in turn has children of its own.
The earliest model was the hierarchical database model, resembling an upside-down tree. Files are related in a parent-child manner, with each parent capable of relating to more than one child, but each child only being related to one parent. Most of you will be familiar with this kind of structure—it’s the way most file systems work. There is usually a root, or top-level, directory that contains various other directories and files. Each subdirectory can then contain more files and directories, and so on. Each file or directory can only exist in one directory itself—it only has one parent. As you can see in the image below A1 is the root directory, and its children are B1 and B2. B1 is a parent to C1, C2, and C3, which in turn has children of its own.
The earliest model was the hierarchical database model, resembling an upside-down tree. Files are related in a parent-child manner, with each parent capable of relating to more than one child, but each child only being related to one parent. Most of you will be familiar with this kind of structure—it’s the way most file systems work. There is usually a root, or top-level, directory that contains various other directories and files. Each subdirectory can then contain more files and directories, and so on. Each file or directory can only exist in one directory itself—it only has one parent. As you can see in the image below A1 is the root directory, and its children are B1 and B2. B1 is a parent to C1, C2, and C3, which in turn has children of its own.
The earliest model was the hierarchical database model, resembling an upside-down tree. Files are related in a parent-child manner, with each parent capable of relating to more than one child, but each child only being related to one parent. Most of you will be familiar with this kind of structure—it’s the way most file systems work. There is usually a root, or top-level, directory that contains various other directories and files. Each subdirectory can then contain more files and directories, and so on. Each file or directory can only exist in one directory itself—it only has one parent. As you can see in the image below A1 is the root directory, and its children are B1 and B2. B1 is a parent to C1, C2, and C3, which in turn has children of its own.
The earliest model was the hierarchical database model, resembling an upside-down tree. Files are related in a parent-child manner, with each parent capable of relating to more than one child, but each child only being related to one parent. Most of you will be familiar with this kind of structure—it’s the way most file systems work. There is usually a root, or top-level, directory that contains various other directories and files. Each subdirectory can then contain more files and directories, and so on. Each file or directory can only exist in one directory itself—it only has one parent. As you can see in the image below A1 is the root directory, and its children are B1 and B2. B1 is a parent to C1, C2, and C3, which in turn has children of its own.
The earliest model was the hierarchical database model, resembling an upside-down tree. Files are related in a parent-child manner, with each parent capable of relating to more than one child, but each child only being related to one parent. Most of you will be familiar with this kind of structure—it’s the way most file systems work. There is usually a root, or top-level, directory that contains various other directories and files. Each subdirectory can then contain more files and directories, and so on. Each file or directory can only exist in one directory itself—it only has one parent. As you can see in the image below A1 is the root directory, and its children are B1 and B2. B1 is a parent to C1, C2, and C3, which in turn has children of its own.
The earliest model was the hierarchical database model, resembling an upside-down tree. Files are related in a parent-child manner, with each parent capable of relating to more than one child, but each child only being related to one parent. Most of you will be familiar with this kind of structure—it’s the way most file systems work. There is usually a root, or top-level, directory that contains various other directories and files. Each subdirectory can then contain more files and directories, and so on. Each file or directory can only exist in one directory itself—it only has one parent. As you can see in the image below A1 is the root directory, and its children are B1 and B2. B1 is a parent to C1, C2, and C3, which in turn has children of its own.
The earliest model was the hierarchical database model, resembling an upside-down tree. Files are related in a parent-child manner, with each parent capable of relating to more than one child, but each child only being related to one parent. Most of you will be familiar with this kind of structure—it’s the way most file systems work. There is usually a root, or top-level, directory that contains various other directories and files. Each subdirectory can then contain more files and directories, and so on. Each file or directory can only exist in one directory itself—it only has one parent. As you can see in the image below A1 is the root directory, and its children are B1 and B2. B1 is a parent to C1, C2, and C3, which in turn has children of its own.



This model, although being a vast improvement on dealing with unrelated files, has some serious disadvantages. It represents one-to-many relationships well (one parent has many children; for example, one company branch has many employees), but it has problems with many-to-many relationships. Relationships such as that between a product file and an orders file are difficult to implement in a hierarchical model. Specifically, an order can contain many products, and a product can appear in many orders. Also, the hierarchal model is not flexible because adding new relationships can result in wholesale changes to the existing structure, which in turn means all existing applications need to change as well. This is not fun when someone has forgotten a table and wants it added to the system shortly before the project is due to launch! And developing the applications is complex because the programmer needs to know the data structure well in order to traverse the model to access the needed data. As you’ve seen in the earlier chapters, when accessing data from two related tables, you only need to know the fields you require from those two tables. In the hierarchical model, you’d need to know the entire chain between the two. For example, to relate data from A1 and D4, you’d need to take the route: A1, B1, C3 and D4.
This model, although being a vast improvement on dealing with unrelated files, has some serious disadvantages. It represents one-to-many relationships well (one parent has many children; for example, one company branch has many employees), but it has problems with many-to-many relationships. Relationships such as that between a product file and an orders file are difficult to implement in a hierarchical model. Specifically, an order can contain many products, and a product can appear in many orders. Also, the hierarchal model is not flexible because adding new relationships can result in wholesale changes to the existing structure, which in turn means all existing applications need to change as well. This is not fun when someone has forgotten a table and wants it added to the system shortly before the project is due to launch! And developing the applications is complex because the programmer needs to know the data structure well in order to traverse the model to access the needed data. As you’ve seen in the earlier chapters, when accessing data from two related tables, you only need to know the fields you require from those two tables. In the hierarchical model, you’d need to know the entire chain between the two. For example, to relate data from A1 and D4, you’d need to take the route: A1, B1, C3 and D4.
This model, although being a vast improvement on dealing with unrelated files, has some serious disadvantages. It represents one-to-many relationships well (one parent has many children; for example, one company branch has many employees), but it has problems with many-to-many relationships. Relationships such as that between a product file and an orders file are difficult to implement in a hierarchical model. Specifically, an order can contain many products, and a product can appear in many orders. Also, the hierarchal model is not flexible because adding new relationships can result in wholesale changes to the existing structure, which in turn means all existing applications need to change as well. This is not fun when someone has forgotten a table and wants it added to the system shortly before the project is due to launch! And developing the applications is complex because the programmer needs to know the data structure well in order to traverse the model to access the needed data. As you’ve seen in the earlier chapters, when accessing data from two related tables, you only need to know the fields you require from those two tables. In the hierarchical model, you’d need to know the entire chain between the two. For example, to relate data from A1 and D4, you’d need to take the route: A1, B1, C3 and D4.
This model, although being a vast improvement on dealing with unrelated files, has some serious disadvantages. It represents one-to-many relationships well (one parent has many children; for example, one company branch has many employees), but it has problems with many-to-many relationships. Relationships such as that between a product file and an orders file are difficult to implement in a hierarchical model. Specifically, an order can contain many products, and a product can appear in many orders. Also, the hierarchal model is not flexible because adding new relationships can result in wholesale changes to the existing structure, which in turn means all existing applications need to change as well. This is not fun when someone has forgotten a table and wants it added to the system shortly before the project is due to launch! And developing the applications is complex because the programmer needs to know the data structure well in order to traverse the model to access the needed data. As you’ve seen in the earlier chapters, when accessing data from two related tables, you only need to know the fields you require from those two tables. In the hierarchical model, you’d need to know the entire chain between the two. For example, to relate data from A1 and D4, you’d need to take the route: A1, B1, C3 and D4.
This model, although being a vast improvement on dealing with unrelated files, has some serious disadvantages. It represents one-to-many relationships well (one parent has many children; for example, one company branch has many employees), but it has problems with many-to-many relationships. Relationships such as that between a product file and an orders file are difficult to implement in a hierarchical model. Specifically, an order can contain many products, and a product can appear in many orders. Also, the hierarchal model is not flexible because adding new relationships can result in wholesale changes to the existing structure, which in turn means all existing applications need to change as well. This is not fun when someone has forgotten a table and wants it added to the system shortly before the project is due to launch! And developing the applications is complex because the programmer needs to know the data structure well in order to traverse the model to access the needed data. As you’ve seen in the earlier chapters, when accessing data from two related tables, you only need to know the fields you require from those two tables. In the hierarchical model, you’d need to know the entire chain between the two. For example, to relate data from A1 and D4, you’d need to take the route: A1, B1, C3 and D4.
This model, although being a vast improvement on dealing with unrelated files, has some serious disadvantages. It represents one-to-many relationships well (one parent has many children; for example, one company branch has many employees), but it has problems with many-to-many relationships. Relationships such as that between a product file and an orders file are difficult to implement in a hierarchical model. Specifically, an order can contain many products, and a product can appear in many orders. Also, the hierarchal model is not flexible because adding new relationships can result in wholesale changes to the existing structure, which in turn means all existing applications need to change as well. This is not fun when someone has forgotten a table and wants it added to the system shortly before the project is due to launch! And developing the applications is complex because the programmer needs to know the data structure well in order to traverse the model to access the needed data. As you’ve seen in the earlier chapters, when accessing data from two related tables, you only need to know the fields you require from those two tables. In the hierarchical model, you’d need to know the entire chain between the two. For example, to relate data from A1 and D4, you’d need to take the route: A1, B1, C3 and D4.
This model, although being a vast improvement on dealing with unrelated files, has some serious disadvantages. It represents one-to-many relationships well (one parent has many children; for example, one company branch has many employees), but it has problems with many-to-many relationships. Relationships such as that between a product file and an orders file are difficult to implement in a hierarchical model. Specifically, an order can contain many products, and a product can appear in many orders. Also, the hierarchal model is not flexible because adding new relationships can result in wholesale changes to the existing structure, which in turn means all existing applications need to change as well. This is not fun when someone has forgotten a table and wants it added to the system shortly before the project is due to launch! And developing the applications is complex because the programmer needs to know the data structure well in order to traverse the model to access the needed data. As you’ve seen in the earlier chapters, when accessing data from two related tables, you only need to know the fields you require from those two tables. In the hierarchical model, you’d need to know the entire chain between the two. For example, to relate data from A1 and D4, you’d need to take the route: A1, B1, C3 and D4.
This model, although being a vast improvement on dealing with unrelated files, has some serious disadvantages. It represents one-to-many relationships well (one parent has many children; for example, one company branch has many employees), but it has problems with many-to-many relationships. Relationships such as that between a product file and an orders file are difficult to implement in a hierarchical model. Specifically, an order can contain many products, and a product can appear in many orders. Also, the hierarchal model is not flexible because adding new relationships can result in wholesale changes to the existing structure, which in turn means all existing applications need to change as well. This is not fun when someone has forgotten a table and wants it added to the system shortly before the project is due to launch! And developing the applications is complex because the programmer needs to know the data structure well in order to traverse the model to access the needed data. As you’ve seen in the earlier chapters, when accessing data from two related tables, you only need to know the fields you require from those two tables. In the hierarchical model, you’d need to know the entire chain between the two. For example, to relate data from A1 and D4, you’d need to take the route: A1, B1, C3 and D4.
This model, although being a vast improvement on dealing with unrelated files, has some serious disadvantages. It represents one-to-many relationships well (one parent has many children; for example, one company branch has many employees), but it has problems with many-to-many relationships. Relationships such as that between a product file and an orders file are difficult to implement in a hierarchical model. Specifically, an order can contain many products, and a product can appear in many orders. Also, the hierarchal model is not flexible because adding new relationships can result in wholesale changes to the existing structure, which in turn means all existing applications need to change as well. This is not fun when someone has forgotten a table and wants it added to the system shortly before the project is due to launch! And developing the applications is complex because the programmer needs to know the data structure well in order to traverse the model to access the needed data. As you’ve seen in the earlier chapters, when accessing data from two related tables, you only need to know the fields you require from those two tables. In the hierarchical model, you’d need to know the entire chain between the two. For example, to relate data from A1 and D4, you’d need to take the route: A1, B1, C3 and D4.
This model, although being a vast improvement on dealing with unrelated files, has some serious disadvantages. It represents one-to-many relationships well (one parent has many children; for example, one company branch has many employees), but it has problems with many-to-many relationships. Relationships such as that between a product file and an orders file are difficult to implement in a hierarchical model. Specifically, an order can contain many products, and a product can appear in many orders. Also, the hierarchal model is not flexible because adding new relationships can result in wholesale changes to the existing structure, which in turn means all existing applications need to change as well. This is not fun when someone has forgotten a table and wants it added to the system shortly before the project is due to launch! And developing the applications is complex because the programmer needs to know the data structure well in order to traverse the model to access the needed data. As you’ve seen in the earlier chapters, when accessing data from two related tables, you only need to know the fields you require from those two tables. In the hierarchical model, you’d need to know the entire chain between the two. For example, to relate data from A1 and D4, you’d need to take the route: A1, B1, C3 and D4.



