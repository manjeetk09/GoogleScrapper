Application code can contain various types of errors, or bugs.
 Most syntax errors are caught during compilation.
 However, other types of errors require that you debug your code   that is, that you examine the code while it is running to validate that the execution path and data is as it should be.
Application code can contain various types of errors, or bugs.
 Most syntax errors are caught during compilation.
 However, other types of errors require that you debug your code   that is, that you examine the code while it is running to validate that the execution path and data is as it should be.
Application code can contain various types of errors, or bugs.
 Most syntax errors are caught during compilation.
 However, other types of errors require that you debug your code   that is, that you examine the code while it is running to validate that the execution path and data is as it should be.
 For more information, see Debugging, Tracing, and Profiling.
Summary.
 This paper describes some of the new and improved features of the Microsoft  Visual Studio  .
NET debugger, such as cross_language debugging, debugging multiple processes across machines, and the generation of minidumps for C   applications.
 .
You can also step between C   code to any .
NET Framework language and vice versa.
 Code written for .
NET_based applications can work with C   code through Platform Invoke, COM Interoperability, or through Managed Extensions for C  .
 You can seamlessly step into and debug from one language to the other, and again, the debugger will have a single callstack showing all the components.
 To enable debugging between the common language runtime code and C   code running natively, you need to change an option in your launching project settings.
 In Solution Explorer, locate your startup project .
 This is the project that gets launched when you press F5.
 To debug both runtime code and native code, the startup project has to be configured to support both types of debugging.
 To do this, open your project properties and select the Debugging folder under Configuration Properties.
 For Visual Basic .
NET or Visual C   projects.
 Make sure the Enable Unmanaged Debugging option is selected.
 In Visual Basic, this option is selected via a checkbox.
 In Visual C  this is a drop_down list option.
 For Visual C   projects.
 Change the debugger type to Mixed.
 Note   The Auto option, another option, requires some explanation.
 It examines your executable file and attempts to determine whether the application will call both native and managed code.
 Based on the results of the analysis, the appropriate debuggers are used during debugging.
 A disadvantage of this approach is that if a project was written with managed extensions to C   and dynamically loaded native code, this will not be detected and you will not be able to debug the native code.
 Setting Mixed allows a developer to directly control the debugging options.
