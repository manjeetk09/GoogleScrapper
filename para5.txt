The tree is one of the most powerful of the advanced data structures and it often pops up in even more advanced subjects such as AI and compiler design. Surprisingly though the tree is important in a much more basic application - namely the keeping of an efficient index.
The tree is one of the most powerful of the advanced data structures and it often pops up in even more advanced subjects such as AI and compiler design. Surprisingly though the tree is important in a much more basic application - namely the keeping of an efficient index.
 


 
 

 
 
 

 
 

 



 


 
Whenever you use a database there is a 99% chance that an index is involved somewhere. The simplest type of index is a sorted listing of the key field. This provides a fast lookup because you can use a binary search to locate any item without having to look at each one in turn.
Whenever you use a database there is a 99% chance that an index is involved somewhere. The simplest type of index is a sorted listing of the key field. This provides a fast lookup because you can use a binary search to locate any item without having to look at each one in turn.
Whenever you use a database there is a 99% chance that an index is involved somewhere. The simplest type of index is a sorted listing of the key field. This provides a fast lookup because you can use a binary search to locate any item without having to look at each one in turn.
 

 
 
 

 
 

 




There are different types of tree data structures. Some of them are
There are different types of tree data structures. Some of them are















Data Structures
















1 Trees 1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps 2 References 3 External Links
1 Trees 1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps 2 References 3 External Links
1 Trees 1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps 2 References 3 External Links
1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps
1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps
1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps
1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps
1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps
1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps
1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps
1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps
1.1 Traversal 1.2 Sample implementations for Tree Traversal 1.3 Examples of Tree Traversals 1.4 Balancing 1.5 Binary Search Trees 1.5.1 Terms 1.5.2 Searching through a binary search tree 1.5.2.1 Example 1.5.3 Adding an item to a binary search tree 1.5.4 Deleting an item from a binary search tree 1.5.4.1 Case 1: The node you want to delete is a leaf 1.5.4.2 Case 2: The node you want to delete has one child 1.5.4.3 Case 3: The node you want to delete has two children 1.5.4.3.1 Case 1 of two-children case: The successor is the right child of the node being deleted 1.5.4.3.2 Case 2 of two-children case: The successor isn't the right child of the node being deleted 1.6 Example extract of java code for binary tree delete operation 1.7 Red-Black trees 1.8 B Trees 1.8.1 Executive Summary 1.8.2 A B tree java example 1.8.3 A B+ tree java example 1.9 Treaps





Types of trees:













A tree data structure can be defined recursively (locally) as a collection of nodes (starting at a root node), where each node is a data structure consisting of a value, together with a list of references to nodes (the "children"), with the constraints that no reference is duplicated, and none points to the root.


together with:


This is a list of data structures. For a wider list of terms, see list of terms relating to algorithms and data structures. For a comparison of running time of subset of this list see comparison of data structures.
This is a list of data structures. For a wider list of terms, see list of terms relating to algorithms and data structures. For a comparison of running time of subset of this list see comparison of data structures.
This is a list of data structures. For a wider list of terms, see list of terms relating to algorithms and data structures. For a comparison of running time of subset of this list see comparison of data structures.


Some properties of abstract data types:
A data structure is said to be linear if its elements form a sequence.
In these data structures each tree node compares a bit slice of key values.
These are data structures used for space partitioning or binary space partitioning.
1 Data types 1.1 Primitive types 1.2 Composite types or Non-primitive type 1.3 Abstract data types 2 Linear data structures 2.1 Arrays 2.2 Lists 3 Trees 3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees 4 Hashes 5 Graphs 6 Other 7 External links
1 Data types 1.1 Primitive types 1.2 Composite types or Non-primitive type 1.3 Abstract data types 2 Linear data structures 2.1 Arrays 2.2 Lists 3 Trees 3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees 4 Hashes 5 Graphs 6 Other 7 External links
1 Data types 1.1 Primitive types 1.2 Composite types or Non-primitive type 1.3 Abstract data types 2 Linear data structures 2.1 Arrays 2.2 Lists 3 Trees 3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees 4 Hashes 5 Graphs 6 Other 7 External links
1 Data types 1.1 Primitive types 1.2 Composite types or Non-primitive type 1.3 Abstract data types 2 Linear data structures 2.1 Arrays 2.2 Lists 3 Trees 3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees 4 Hashes 5 Graphs 6 Other 7 External links
1 Data types 1.1 Primitive types 1.2 Composite types or Non-primitive type 1.3 Abstract data types 2 Linear data structures 2.1 Arrays 2.2 Lists 3 Trees 3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees 4 Hashes 5 Graphs 6 Other 7 External links
1 Data types 1.1 Primitive types 1.2 Composite types or Non-primitive type 1.3 Abstract data types 2 Linear data structures 2.1 Arrays 2.2 Lists 3 Trees 3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees 4 Hashes 5 Graphs 6 Other 7 External links
1 Data types 1.1 Primitive types 1.2 Composite types or Non-primitive type 1.3 Abstract data types 2 Linear data structures 2.1 Arrays 2.2 Lists 3 Trees 3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees 4 Hashes 5 Graphs 6 Other 7 External links
1.1 Primitive types 1.2 Composite types or Non-primitive type 1.3 Abstract data types
1.1 Primitive types 1.2 Composite types or Non-primitive type 1.3 Abstract data types
1.1 Primitive types 1.2 Composite types or Non-primitive type 1.3 Abstract data types
2.1 Arrays 2.2 Lists
2.1 Arrays 2.2 Lists
3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees
3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees
3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees
3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees
3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees
3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees
3.1 Binary trees 3.2 B-trees 3.3 Heaps 3.4 Trees 3.5 Multiway trees 3.6 Space-partitioning trees 3.7 Application-specific trees
Boolean, true or false Character Floating-point, single-precision real number values Double, a wider floating-point size Integer, integral or fixed-precision values String, a sequence of characters Reference (also called a pointer or handle), a small value referring to another object's address in memory, possibly a much larger one. Enumerated type, a small set of uniquely-named values
Boolean, true or false Character Floating-point, single-precision real number values Double, a wider floating-point size Integer, integral or fixed-precision values String, a sequence of characters Reference (also called a pointer or handle), a small value referring to another object's address in memory, possibly a much larger one. Enumerated type, a small set of uniquely-named values
Boolean, true or false Character Floating-point, single-precision real number values Double, a wider floating-point size Integer, integral or fixed-precision values String, a sequence of characters Reference (also called a pointer or handle), a small value referring to another object's address in memory, possibly a much larger one. Enumerated type, a small set of uniquely-named values
Boolean, true or false Character Floating-point, single-precision real number values Double, a wider floating-point size Integer, integral or fixed-precision values String, a sequence of characters Reference (also called a pointer or handle), a small value referring to another object's address in memory, possibly a much larger one. Enumerated type, a small set of uniquely-named values
Boolean, true or false Character Floating-point, single-precision real number values Double, a wider floating-point size Integer, integral or fixed-precision values String, a sequence of characters Reference (also called a pointer or handle), a small value referring to another object's address in memory, possibly a much larger one. Enumerated type, a small set of uniquely-named values
Boolean, true or false Character Floating-point, single-precision real number values Double, a wider floating-point size Integer, integral or fixed-precision values String, a sequence of characters Reference (also called a pointer or handle), a small value referring to another object's address in memory, possibly a much larger one. Enumerated type, a small set of uniquely-named values
Boolean, true or false Character Floating-point, single-precision real number values Double, a wider floating-point size Integer, integral or fixed-precision values String, a sequence of characters Reference (also called a pointer or handle), a small value referring to another object's address in memory, possibly a much larger one. Enumerated type, a small set of uniquely-named values
Boolean, true or false Character Floating-point, single-precision real number values Double, a wider floating-point size Integer, integral or fixed-precision values String, a sequence of characters Reference (also called a pointer or handle), a small value referring to another object's address in memory, possibly a much larger one. Enumerated type, a small set of uniquely-named values
Array Record (also called tuple or struct) Union Tagged union (also called variant, variant record, discriminated union, or disjoint union)
Array Record (also called tuple or struct) Union Tagged union (also called variant, variant record, discriminated union, or disjoint union)
Array Record (also called tuple or struct) Union Tagged union (also called variant, variant record, discriminated union, or disjoint union)
Array Record (also called tuple or struct) Union Tagged union (also called variant, variant record, discriminated union, or disjoint union)
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Container List Associative array Multimap Set Bag Multiset Stack Queue Double-ended queue Priority queue Tree Graph
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Array Bit array Bit field Bitboard Bitmap Circular buffer Control table Image Dope vector Dynamic array Gap buffer Hashed array tree Heightmap Lookup table Matrix Parallel array Sorted array Sparse matrix Iliffe vector Variable-length array
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
Doubly linked list Array list Linked list Self-organizing list Skip list Unrolled linked list VList Conc-Tree list Xor linked list Zipper Doubly connected edge list Difference list Free list
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
AA tree AVL tree Binary search tree Binary tree Cartesian tree Left-child right-sibling binary tree Order statistic tree Pagoda Randomized binary search tree Red–black tree Rope Scapegoat tree Self-balancing binary search tree Splay tree T-tree Tango tree Threaded binary tree Top tree Treap WAVL tree Weight-balanced tree
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
B-tree B+ tree B*-tree B sharp tree Dancing tree 2-3 tree 2-3-4 tree Queap Fusion tree Bx-tree AList
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
Heap Binary heap Weak heap Binomial heap Fibonacci heap AF-heap Leonardo Heap 2-3 heap Soft heap Pairing heap Leftist heap Treap Beap Skew heap Ternary heap D-ary heap Brodal queue
AF-heap
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Trie Radix tree Suffix tree Suffix array Compressed suffix array FM-index Generalised suffix tree B-trie Judy array X-fast trie Y-fast trie Merkle Tree Ctrie
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Ternary tree K-ary tree And–or tree (a,b)-tree Link/cut tree SPQR-tree Spaghetti stack Disjoint-set data structure Fusion tree Enfilade Exponential tree Fenwick tree Van Emde Boas tree Rose tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Segment tree Interval tree Range tree Bin K-d tree Implicit k-d tree Min/max k-d tree Relaxed k-d tree Adaptive k-d tree Quadtree Octree Linear octree Z-order UB-tree R-tree R+ tree R* tree Hilbert R-tree X-tree Metric tree Cover tree M-tree VP-tree BK-tree Bounding interval hierarchy Bounding volume hierarchy BSP tree Rapidly exploring random tree
Abstract syntax tree Parse tree Decision tree Alternating decision tree Minimax tree Expectiminimax tree Finger tree Expression tree Log-structured merge-tree Lexicographic Search Tree
Abstract syntax tree Parse tree Decision tree Alternating decision tree Minimax tree Expectiminimax tree Finger tree Expression tree Log-structured merge-tree Lexicographic Search Tree
Abstract syntax tree Parse tree Decision tree Alternating decision tree Minimax tree Expectiminimax tree Finger tree Expression tree Log-structured merge-tree Lexicographic Search Tree
Abstract syntax tree Parse tree Decision tree Alternating decision tree Minimax tree Expectiminimax tree Finger tree Expression tree Log-structured merge-tree Lexicographic Search Tree
Abstract syntax tree Parse tree Decision tree Alternating decision tree Minimax tree Expectiminimax tree Finger tree Expression tree Log-structured merge-tree Lexicographic Search Tree
Abstract syntax tree Parse tree Decision tree Alternating decision tree Minimax tree Expectiminimax tree Finger tree Expression tree Log-structured merge-tree Lexicographic Search Tree
Abstract syntax tree Parse tree Decision tree Alternating decision tree Minimax tree Expectiminimax tree Finger tree Expression tree Log-structured merge-tree Lexicographic Search Tree
Abstract syntax tree Parse tree Decision tree Alternating decision tree Minimax tree Expectiminimax tree Finger tree Expression tree Log-structured merge-tree Lexicographic Search Tree
Abstract syntax tree Parse tree Decision tree Alternating decision tree Minimax tree Expectiminimax tree Finger tree Expression tree Log-structured merge-tree Lexicographic Search Tree
Abstract syntax tree Parse tree Decision tree Alternating decision tree Minimax tree Expectiminimax tree Finger tree Expression tree Log-structured merge-tree Lexicographic Search Tree
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Bloom filter Count-Min sketch Distributed hash table Double Hashing Dynamic perfect hash table Hash array mapped trie Hash list Hash table Hash tree Hash trie Koorde Prefix hash tree Rolling hash MinHash Quotient filter Ctrie
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Graph Adjacency list Adjacency matrix Graph-structured stack Scene graph Binary decision diagram Zero-suppressed decision diagram And-inverter graph Directed graph Directed acyclic graph Propositional directed acyclic graph Multigraph Hypergraph
Lightmap Winged edge Doubly connected edge list Quad-edge Routing table Symbol table
Lightmap Winged edge Doubly connected edge list Quad-edge Routing table Symbol table
Lightmap Winged edge Doubly connected edge list Quad-edge Routing table Symbol table
Lightmap Winged edge Doubly connected edge list Quad-edge Routing table Symbol table
Lightmap Winged edge Doubly connected edge list Quad-edge Routing table Symbol table
Lightmap Winged edge Doubly connected edge list Quad-edge Routing table Symbol table
v t e
v t e
v t e
Collection Container
Collection Container
Associative array Multimap List Stack Queue Double-ended queue Priority queue Double-ended priority queue Set Multiset Disjoint-set
Associative array Multimap List Stack Queue Double-ended queue Priority queue Double-ended priority queue Set Multiset Disjoint-set
Associative array Multimap List Stack Queue Double-ended queue Priority queue Double-ended priority queue Set Multiset Disjoint-set
Associative array Multimap List Stack Queue Double-ended queue Priority queue Double-ended priority queue Set Multiset Disjoint-set
Associative array Multimap List Stack Queue Double-ended queue Priority queue Double-ended priority queue Set Multiset Disjoint-set
Associative array Multimap List Stack Queue Double-ended queue Priority queue Double-ended priority queue Set Multiset Disjoint-set
Multimap
Double-ended queue
Double-ended priority queue
Multiset Disjoint-set
Multiset Disjoint-set
Bit array Circular buffer Dynamic array Hash table Hashed array tree Sparse matrix
Bit array Circular buffer Dynamic array Hash table Hashed array tree Sparse matrix
Bit array Circular buffer Dynamic array Hash table Hashed array tree Sparse matrix
Bit array Circular buffer Dynamic array Hash table Hashed array tree Sparse matrix
Bit array Circular buffer Dynamic array Hash table Hashed array tree Sparse matrix
Bit array Circular buffer Dynamic array Hash table Hashed array tree Sparse matrix
Association list Linked list Skip list Unrolled linked list XOR linked list
Association list Linked list Skip list Unrolled linked list XOR linked list
Association list Linked list Skip list Unrolled linked list XOR linked list
Association list Linked list Skip list Unrolled linked list XOR linked list
Association list Linked list Skip list Unrolled linked list XOR linked list
B-tree Binary search tree AA tree AVL tree Red–black tree Self-balancing tree Splay tree Heap Binary heap Binomial heap Fibonacci heap R-tree R* tree R+ tree Hilbert R-tree Trie Hash tree
B-tree Binary search tree AA tree AVL tree Red–black tree Self-balancing tree Splay tree Heap Binary heap Binomial heap Fibonacci heap R-tree R* tree R+ tree Hilbert R-tree Trie Hash tree
B-tree Binary search tree AA tree AVL tree Red–black tree Self-balancing tree Splay tree Heap Binary heap Binomial heap Fibonacci heap R-tree R* tree R+ tree Hilbert R-tree Trie Hash tree
B-tree Binary search tree AA tree AVL tree Red–black tree Self-balancing tree Splay tree Heap Binary heap Binomial heap Fibonacci heap R-tree R* tree R+ tree Hilbert R-tree Trie Hash tree
B-tree Binary search tree AA tree AVL tree Red–black tree Self-balancing tree Splay tree Heap Binary heap Binomial heap Fibonacci heap R-tree R* tree R+ tree Hilbert R-tree Trie Hash tree
AA tree AVL tree Red–black tree Self-balancing tree Splay tree
AA tree AVL tree Red–black tree Self-balancing tree Splay tree
AA tree AVL tree Red–black tree Self-balancing tree Splay tree
AA tree AVL tree Red–black tree Self-balancing tree Splay tree
AA tree AVL tree Red–black tree Self-balancing tree Splay tree
Binary heap Binomial heap Fibonacci heap
Binary heap Binomial heap Fibonacci heap
Binary heap Binomial heap Fibonacci heap
R* tree R+ tree Hilbert R-tree
R* tree R+ tree Hilbert R-tree
R* tree R+ tree Hilbert R-tree
Hash tree
Binary decision diagram Directed acyclic graph Directed acyclic word graph
Binary decision diagram Directed acyclic graph Directed acyclic word graph
Binary decision diagram Directed acyclic graph Directed acyclic word graph
List of data structures
Tommy Benchmarks Comparison of several data structures.
Data structures Computing-related lists
Data structures Computing-related lists
Not logged in Talk Contributions Create account Log in
Not logged in Talk Contributions Create account Log in
Not logged in Talk Contributions Create account Log in
Not logged in Talk Contributions Create account Log in
Not logged in Talk Contributions Create account Log in
Article Talk
Article Talk
Read Edit View history
Read Edit View history
Read Edit View history
Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store
Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store
Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store
Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store
Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store
Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store
Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store
Help About Wikipedia Community portal Recent changes Contact page
Help About Wikipedia Community portal Recent changes Contact page
Help About Wikipedia Community portal Recent changes Contact page
Help About Wikipedia Community portal Recent changes Contact page
Help About Wikipedia Community portal Recent changes Contact page
What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page
What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page
What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page
What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page
What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page
What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page
What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page
What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page
Create a book Download as PDF Printable version
Create a book Download as PDF Printable version
Create a book Download as PDF Printable version
فارسی हिन्दी Italiano Magyar Русский ไทย Türkçe Українська Tiếng Việt 中文
فارسی हिन्दी Italiano Magyar Русский ไทย Türkçe Українська Tiếng Việt 中文
فارسی हिन्दी Italiano Magyar Русский ไทย Türkçe Українська Tiếng Việt 中文
فارسی हिन्दी Italiano Magyar Русский ไทย Türkçe Українська Tiếng Việt 中文
فارسی हिन्दी Italiano Magyar Русский ไทย Türkçe Українська Tiếng Việt 中文
فارسی हिन्दी Italiano Magyar Русский ไทย Türkçe Українська Tiếng Việt 中文
فارسی हिन्दी Italiano Magyar Русский ไทย Türkçe Українська Tiếng Việt 中文
فارسی हिन्दी Italiano Magyar Русский ไทย Türkçe Українська Tiếng Việt 中文
فارسی हिन्दी Italiano Magyar Русский ไทย Türkçe Українська Tiếng Việt 中文
فارسی हिन्दी Italiano Magyar Русский ไทย Türkçe Українська Tiếng Việt 中文
This page was last edited on 30 April 2017, at 15:25. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
This page was last edited on 30 April 2017, at 15:25. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view
Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view
Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view
Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view
Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view
Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view
Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view




Some properties of abstract data types:
Double-ended queue


In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.





 
{
 
 
 
    {
        {
        }
    }
 
    {
        {
        }
        {
        }
    }
 
    {
        {
        }
    }
 
    {
        {
        }
 
        {
        }
 
    }
 
    {
    }
}
 
{
 
    {
        {
        }
 
    }
 
    {
        {
        }
    }
 
    {
        {
        }
    }
 
    {
        {
        }
 
 
        {
        }
    }
 
    {
    }
}
 
{
    {
            );
 
 
    }
}

 
{
    {
 
 
        {
        }
    }
 
    {
    }
 
    {
    }
}
…
 
{
    {
        {
 
            {
            }
        }
    }
 
    {
    }
}
…
 




 
{
 
 
   
    {
    }
 
    {
    }
 
    {
        {
        }
 
 
        {
        }
    }
}
 
{
    {
 
 
    }
}



…
{
 
 
 
 
    {
        {
        }
 
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
}
…
{
}

{
    {
        // …
        // …
    }
 
 
    {
    }
 
    // …
    // …
}
{
}
 
{
    {
    }
    {
        {
        }
        {
        }
    }
 
}
{
    {
        {
        }
        {
        }
        {
        }
    }
 
}
 
{
}


{
    {
    }
}
 
{
    {
        {
        }
    }
 
 
    {
 
        {
        }
        {
            {
            }
            {
            }
        }
    }
    {
        {
        }
        {
            {
            }
            {
            }
        }
    }
}
{
}
 
{
    {
    }
}
{
    {
    }
}





 
{
 
    {
        {
        }
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
}

{
    });
 
 
    {
        {
            {
            }
        }
    }
 
    {
        {
            {
            }
        }
    }
}



In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.
In this chapter we will discuss tree data structures, like trees and graphs. The abilities of these data structures are really important for the modern programming. Each of this data structures is used for building a model of real life problems, which are efficiently solved using this model. We will explain what tree data structures are and will review their main advantages and disadvantages. We will present example implementations and problems showing their practical usage. We will focus on binary trees, binary search trees and self-balancing binary search tree. We will explain what graph is, the types of graphs, how to represent a graph in the memory (graph implementation) and where graphs are used in our life and in the computer technologies. We will see where in .NET Framework self-balancing binary search trees are implemented and how to use them.





 
{
 
 
 
    {
        {
        }
    }
 
    {
        {
        }
        {
        }
    }
 
    {
        {
        }
    }
 
    {
        {
        }
 
        {
        }
 
    }
 
    {
    }
}
 
{
 
    {
        {
        }
 
    }
 
    {
        {
        }
    }
 
    {
        {
        }
    }
 
    {
        {
        }
 
 
        {
        }
    }
 
    {
    }
}
 
{
    {
            );
 
 
    }
}

 
{
    {
 
 
        {
        }
    }
 
    {
    }
 
    {
    }
}
…
 
{
    {
        {
 
            {
            }
        }
    }
 
    {
    }
}
…
 




 
{
 
 
   
    {
    }
 
    {
    }
 
    {
        {
        }
 
 
        {
        }
    }
}
 
{
    {
 
 
    }
}



…
{
 
 
 
 
    {
        {
        }
 
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
}
…
{
}

{
    {
        // …
        // …
    }
 
 
    {
    }
 
    // …
    // …
}
{
}
 
{
    {
    }
    {
        {
        }
        {
        }
    }
 
}
{
    {
        {
        }
        {
        }
        {
        }
    }
 
}
 
{
}


{
    {
    }
}
 
{
    {
        {
        }
    }
 
 
    {
 
        {
        }
        {
            {
            }
            {
            }
        }
    }
    {
        {
        }
        {
            {
            }
            {
            }
        }
    }
}
{
}
 
{
    {
    }
}
{
    {
    }
}





 
{
 
    {
        {
        }
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
}

{
    });
 
 
    {
        {
            {
            }
        }
    }
 
    {
        {
            {
            }
        }
    }
}








Depth of a node we will call the length of the path from the root to certain node. In our example "7" as root has depth zero, "19" has depth one and "23" – depth two.
Depth of a node we will call the length of the path from the root to certain node. In our example "7" as root has depth zero, "19" has depth one and "23" – depth two.
 
{
 
 
 
    {
        {
        }
    }
 
    {
        {
        }
        {
        }
    }
 
    {
        {
        }
    }
 
    {
        {
        }
 
        {
        }
 
    }
 
    {
    }
}
 
{
 
    {
        {
        }
 
    }
 
    {
        {
        }
    }
 
    {
        {
        }
    }
 
    {
        {
        }
 
 
        {
        }
    }
 
    {
    }
}
 
{
    {
            );
 
 
        // 7
        //       19
        //        1
        //        23
    }
}

 
{
    {
 
 
        {
        }
    }
 
    {
    }
 
    {
    }
}
…
 
{
    {
        {
 
            {
            }
        }
    }
 
    {
    }
}
…
 




 
{
 
 
   
    {
    }
 
    {
    }
 
    {
        {
        }
 
 
        {
        }
    }
}
 
{
    {
 
 
    }
}



…
{
 
 
 
 
    {
        {
        }
 
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
}
…
{
}

{
    {
        // …
        // …
    }
 
 
    {
    }
 
    // …
    // …
}
{
}
 
{
    {
    }
    {
        {
        }
        {
        }
    }
 
}
{
    {
        {
        }
        {
        }
        {
        }
    }
 
}
 
{
}


{
    {
    }
}
 
{
    {
        {
        }
    }
 
 
    {
 
        {
        }
        {
            {
            }
            {
            }
        }
    }
    {
        {
        }
        {
            {
            }
            {
            }
        }
    }
}
{
}
 
{
    {
    }
}
{
    {
    }
}





 
{
 
    {
        {
        }
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
 
    {
    }
}

{
    });
 
 
    {
        {
            {
            }
        }
    }
 
    {
        {
            {
            }
        }
    }
}



There are many basic data structures that can be used to solve application problems. Array is a good static data structure that can be accessed randomly and is fairly easy to implement. Linked Lists on the other hand is dynamic and is ideal for application that requires frequent operations such as add, delete, and update. One drawback of linked list is that data access is sequential. Then there are other specialized data structures like, stacks and queues that allows us to solve complicated problems (eg: Maze traversal) using these restricted data structures. One other data structure is the hash table that allows users to program applications that require frequent search and updates. They can be done in O(1) in a hash table.
There are many basic data structures that can be used to solve application problems. Array is a good static data structure that can be accessed randomly and is fairly easy to implement. Linked Lists on the other hand is dynamic and is ideal for application that requires frequent operations such as add, delete, and update. One drawback of linked list is that data access is sequential. Then there are other specialized data structures like, stacks and queues that allows us to solve complicated problems (eg: Maze traversal) using these restricted data structures. One other data structure is the hash table that allows users to program applications that require frequent search and updates. They can be done in O(1) in a hash table.
There are many basic data structures that can be used to solve application problems. Array is a good static data structure that can be accessed randomly and is fairly easy to implement. Linked Lists on the other hand is dynamic and is ideal for application that requires frequent operations such as add, delete, and update. One drawback of linked list is that data access is sequential. Then there are other specialized data structures like, stacks and queues that allows us to solve complicated problems (eg: Maze traversal) using these restricted data structures. One other data structure is the hash table that allows users to program applications that require frequent search and updates. They can be done in O(1) in a hash table.
There are many basic data structures that can be used to solve application problems. Array is a good static data structure that can be accessed randomly and is fairly easy to implement. Linked Lists on the other hand is dynamic and is ideal for application that requires frequent operations such as add, delete, and update. One drawback of linked list is that data access is sequential. Then there are other specialized data structures like, stacks and queues that allows us to solve complicated problems (eg: Maze traversal) using these restricted data structures. One other data structure is the hash table that allows users to program applications that require frequent search and updates. They can be done in O(1) in a hash table.
There are many basic data structures that can be used to solve application problems. Array is a good static data structure that can be accessed randomly and is fairly easy to implement. Linked Lists on the other hand is dynamic and is ideal for application that requires frequent operations such as add, delete, and update. One drawback of linked list is that data access is sequential. Then there are other specialized data structures like, stacks and queues that allows us to solve complicated problems (eg: Maze traversal) using these restricted data structures. One other data structure is the hash table that allows users to program applications that require frequent search and updates. They can be done in O(1) in a hash table.
There are many basic data structures that can be used to solve application problems. Array is a good static data structure that can be accessed randomly and is fairly easy to implement. Linked Lists on the other hand is dynamic and is ideal for application that requires frequent operations such as add, delete, and update. One drawback of linked list is that data access is sequential. Then there are other specialized data structures like, stacks and queues that allows us to solve complicated problems (eg: Maze traversal) using these restricted data structures. One other data structure is the hash table that allows users to program applications that require frequent search and updates. They can be done in O(1) in a hash table.
There are many basic data structures that can be used to solve application problems. Array is a good static data structure that can be accessed randomly and is fairly easy to implement. Linked Lists on the other hand is dynamic and is ideal for application that requires frequent operations such as add, delete, and update. One drawback of linked list is that data access is sequential. Then there are other specialized data structures like, stacks and queues that allows us to solve complicated problems (eg: Maze traversal) using these restricted data structures. One other data structure is the hash table that allows users to program applications that require frequent search and updates. They can be done in O(1) in a hash table.


}


 

 
 
One of the disadvantages of using an array or linked list to store data is the time necessary to search for an item. Since both the arrays and Linked Lists are linear structures the time required to search a “linear” list is proportional to the size of the data set. For example, if the size of the data set is n, then the number of comparisons needed to find (or not find) an item may be as bad as some multiple of n. So imagine doing the search on a linked list (or array) with n = 106 nodes. Even on a machine that can do million comparisons per second, searching for m items will take roughly m seconds. This not acceptable in today’s world where speed at which we complete operations is extremely important. Time is money. Therefore it seems that better (more efficient) data structures are needed to store and search data.
One of the disadvantages of using an array or linked list to store data is the time necessary to search for an item. Since both the arrays and Linked Lists are linear structures the time required to search a “linear” list is proportional to the size of the data set. For example, if the size of the data set is n, then the number of comparisons needed to find (or not find) an item may be as bad as some multiple of n. So imagine doing the search on a linked list (or array) with n = 106 nodes. Even on a machine that can do million comparisons per second, searching for m items will take roughly m seconds. This not acceptable in today’s world where speed at which we complete operations is extremely important. Time is money. Therefore it seems that better (more efficient) data structures are needed to store and search data.
One of the disadvantages of using an array or linked list to store data is the time necessary to search for an item. Since both the arrays and Linked Lists are linear structures the time required to search a “linear” list is proportional to the size of the data set. For example, if the size of the data set is n, then the number of comparisons needed to find (or not find) an item may be as bad as some multiple of n. So imagine doing the search on a linked list (or array) with n = 106 nodes. Even on a machine that can do million comparisons per second, searching for m items will take roughly m seconds. This not acceptable in today’s world where speed at which we complete operations is extremely important. Time is money. Therefore it seems that better (more efficient) data structures are needed to store and search data.
One of the disadvantages of using an array or linked list to store data is the time necessary to search for an item. Since both the arrays and Linked Lists are linear structures the time required to search a “linear” list is proportional to the size of the data set. For example, if the size of the data set is n, then the number of comparisons needed to find (or not find) an item may be as bad as some multiple of n. So imagine doing the search on a linked list (or array) with n = 106 nodes. Even on a machine that can do million comparisons per second, searching for m items will take roughly m seconds. This not acceptable in today’s world where speed at which we complete operations is extremely important. Time is money. Therefore it seems that better (more efficient) data structures are needed to store and search data.
One of the disadvantages of using an array or linked list to store data is the time necessary to search for an item. Since both the arrays and Linked Lists are linear structures the time required to search a “linear” list is proportional to the size of the data set. For example, if the size of the data set is n, then the number of comparisons needed to find (or not find) an item may be as bad as some multiple of n. So imagine doing the search on a linked list (or array) with n = 106 nodes. Even on a machine that can do million comparisons per second, searching for m items will take roughly m seconds. This not acceptable in today’s world where speed at which we complete operations is extremely important. Time is money. Therefore it seems that better (more efficient) data structures are needed to store and search data.
One of the disadvantages of using an array or linked list to store data is the time necessary to search for an item. Since both the arrays and Linked Lists are linear structures the time required to search a “linear” list is proportional to the size of the data set. For example, if the size of the data set is n, then the number of comparisons needed to find (or not find) an item may be as bad as some multiple of n. So imagine doing the search on a linked list (or array) with n = 106 nodes. Even on a machine that can do million comparisons per second, searching for m items will take roughly m seconds. This not acceptable in today’s world where speed at which we complete operations is extremely important. Time is money. Therefore it seems that better (more efficient) data structures are needed to store and search data.
One of the disadvantages of using an array or linked list to store data is the time necessary to search for an item. Since both the arrays and Linked Lists are linear structures the time required to search a “linear” list is proportional to the size of the data set. For example, if the size of the data set is n, then the number of comparisons needed to find (or not find) an item may be as bad as some multiple of n. So imagine doing the search on a linked list (or array) with n = 106 nodes. Even on a machine that can do million comparisons per second, searching for m items will take roughly m seconds. This not acceptable in today’s world where speed at which we complete operations is extremely important. Time is money. Therefore it seems that better (more efficient) data structures are needed to store and search data.
One of the disadvantages of using an array or linked list to store data is the time necessary to search for an item. Since both the arrays and Linked Lists are linear structures the time required to search a “linear” list is proportional to the size of the data set. For example, if the size of the data set is n, then the number of comparisons needed to find (or not find) an item may be as bad as some multiple of n. So imagine doing the search on a linked list (or array) with n = 106 nodes. Even on a machine that can do million comparisons per second, searching for m items will take roughly m seconds. This not acceptable in today’s world where speed at which we complete operations is extremely important. Time is money. Therefore it seems that better (more efficient) data structures are needed to store and search data.


}


 

 
 
Full Binary Tree A Binary Tree is full if every node has 0 or 2 children. Following are examples of full binary tree.
Full Binary Tree A Binary Tree is full if every node has 0 or 2 children. Following are examples of full binary tree.
Practical example of Complete Binary Tree is Binary Heap.








In linear data structure, data is organized in sequential order and in non-linear data structure, data is organized in random order. Tree is a very popular data structure used in wide range of applications. A tree data structure can be defined as follows...
In linear data structure, data is organized in sequential order and in non-linear data structure, data is organized in random order. Tree is a very popular data structure used in wide range of applications. A tree data structure can be defined as follows...
In linear data structure, data is organized in sequential order and in non-linear data structure, data is organized in random order. Tree is a very popular data structure used in wide range of applications. A tree data structure can be defined as follows...
Tree data structure is a collection of data (Node) which is organized in hierarchical structure and this is a recursive definition
In a normal tree, every node can have any number of children. Binary tree is a special type of tree data structure in which every node can have a maximum of 2 children. One is known as left child and the other is known as right child.
In a normal tree, every node can have any number of children. Binary tree is a special type of tree data structure in which every node can have a maximum of 2 children. One is known as left child and the other is known as right child.
In a normal tree, every node can have any number of children. Binary tree is a special type of tree data structure in which every node can have a maximum of 2 children. One is known as left child and the other is known as right child.
In a binary tree, every node can have a maximum of two children. But in strictly binary tree, every node should have exactly two children or none and in complete binary tree all the nodes must have exactly two children and at every level of complete binary tree there must be 2level number of nodes. For example at level 2 there must be 22 = 4 nodes and at level 3 there must be 23 = 8 nodes.
In a binary tree, every node can have a maximum of two children. But in strictly binary tree, every node should have exactly two children or none and in complete binary tree all the nodes must have exactly two children and at every level of complete binary tree there must be 2level number of nodes. For example at level 2 there must be 22 = 4 nodes and at level 3 there must be 23 = 8 nodes.
In a binary tree, every node can have a maximum of two children. But in strictly binary tree, every node should have exactly two children or none and in complete binary tree all the nodes must have exactly two children and at every level of complete binary tree there must be 2level number of nodes. For example at level 2 there must be 22 = 4 nodes and at level 3 there must be 23 = 8 nodes.
Now that we have studied linear data structures like stacks and queues and have some experience with recursion, we will look at a common data structure called the tree. Trees are used in many areas of computer science, including operating systems, graphics, database systems, and computer networking. Tree data structures have many things in common with their botanical cousins. A tree data structure has a root, branches, and leaves. The difference between a tree in nature and a tree in computer science is that a tree data structure has its root at the top and its leaves on the bottom.
Now that we have studied linear data structures like stacks and queues and have some experience with recursion, we will look at a common data structure called the tree. Trees are used in many areas of computer science, including operating systems, graphics, database systems, and computer networking. Tree data structures have many things in common with their botanical cousins. A tree data structure has a root, branches, and leaves. The difference between a tree in nature and a tree in computer science is that a tree data structure has its root at the top and its leaves on the bottom.
Now that we have studied linear data structures like stacks and queues and have some experience with recursion, we will look at a common data structure called the tree. Trees are used in many areas of computer science, including operating systems, graphics, database systems, and computer networking. Tree data structures have many things in common with their botanical cousins. A tree data structure has a root, branches, and leaves. The difference between a tree in nature and a tree in computer science is that a tree data structure has its root at the top and its leaves on the bottom.
Now that we have studied linear data structures like stacks and queues and have some experience with recursion, we will look at a common data structure called the tree. Trees are used in many areas of computer science, including operating systems, graphics, database systems, and computer networking. Tree data structures have many things in common with their botanical cousins. A tree data structure has a root, branches, and leaves. The difference between a tree in nature and a tree in computer science is that a tree data structure has its root at the top and its leaves on the bottom.
Now that we have studied linear data structures like stacks and queues and have some experience with recursion, we will look at a common data structure called the tree. Trees are used in many areas of computer science, including operating systems, graphics, database systems, and computer networking. Tree data structures have many things in common with their botanical cousins. A tree data structure has a root, branches, and leaves. The difference between a tree in nature and a tree in computer science is that a tree data structure has its root at the top and its leaves on the bottom.
A third property is that each leaf node is unique. We can specify a path from the root of the tree to a leaf that uniquely identifies each species in the animal kingdom; for example, Animalia \(\rightarrow\) Chordate \(\rightarrow\) Mammal \(\rightarrow\) Carnivora \(\rightarrow\) Felidae \(\rightarrow\) Felis \(\rightarrow\) Domestica.
A third property is that each leaf node is unique. We can specify a path from the root of the tree to a leaf that uniquely identifies each species in the animal kingdom; for example, Animalia \(\rightarrow\) Chordate \(\rightarrow\) Mammal \(\rightarrow\) Carnivora \(\rightarrow\) Felidae \(\rightarrow\) Felis \(\rightarrow\) Domestica.
Overview:
 
 
Binary Tree:
Heap:
 
 
 
 
 
Overview of Data Structures | Set 1 (Linear Data Structures) Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) Overview of Data Structures | Set 3 (Graph, Trie, Segment Tree and Suffix Tree)
Overview of Data Structures | Set 1 (Linear Data Structures) Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) Overview of Data Structures | Set 3 (Graph, Trie, Segment Tree and Suffix Tree)
Overview of Data Structures | Set 1 (Linear Data Structures) Overview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash) Overview of Data Structures | Set 3 (Graph, Trie, Segment Tree and Suffix Tree)
Note: the Abstract Tree describes storage techniques for hierarchical orderings: this is fundamentally different from a search-tree data structure or a heap-based data structure used to store implicitly defined linear orders.
Abstract Tree
Abstract Tree












