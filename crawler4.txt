0;My questions are.
0; What is message passing  .
0; Is there any support for this  message passing  in C  , C  or Java .
0;Is there any support for this  message passing  in C  , C  or Java .
0;An example in Groovy that demonstrates the power of this concept.
0;In computer science, message passing sends a message to a process and relies on the process and the supporting infrastructure to select and invoke the actual code to run.
0; Message passing differs from conventional programming where a process, subroutine, or function is directly invoked by name.
0; Message passing is key to some models of concurrency and object_oriented programming.
0;.
0;.
0;One of the first examples of how this can be used was in the domain of computer graphics.
0; There are all sorts of complexities involved in manipulating graphic objects.
0; For example, simply using the right formula to compute the area of an enclosed shape will vary depending on if the shape is a triangle, rectangle, elipse, or circle.
0; In traditional computer programming this would result in long IF_THEN statements testing what sort of object the shape was and calling the appropriate code.
0; The object_oriented way to handle this is to define a class called Shape with subclasses such as Rectangle and Ellipse and then to simply send a message to any Shape asking it to compute its area.
0; Each Shape object will then invoke the way code with the formula appropriate for that kind of object.
0;.
0;.
0;Synchronous message passing is what typical object_oriented programming languages such as Java and Smalltalk use.
0; Asynchronous message passing requires additional capabilities for storing and retransmitting data for systems that may not run concurrently.
0;.
0;.
0;.
0;.
0;May 2017 .
0;April 2017 .
0;March 2017 .
0;February 2017 .
0;January 2017 .
0;December 2016 .
0;November 2016 .
0;October 2016 .
0;September 2016 .
0;August 2016 .
0;July 2016 .
0;June 2016 .
0;May 2016 .
0;April 2016 .
0;The messages are send and received by passing various variables among specific methods using the signature of the methods.
0; Every methods has a well defined and structured signature.
0; The signature of a method is composed of a type, associated with the variable whose value after execution of the method, would be returned to the object that would invoke the method  the types of a specific number of variables and the order associated with these variables whose values would be passed to the method before execution of the method starts.
0; All these variables have a well defined format and corresponding values at any instant of time available for communication during the execution of the program.
0; Figure below shows an example of a signature for a method  evaluate .
0;Message passing is a type of communication between processes or objects in computer science.
0; In this model, processes or objects can send and receive messages to other processes or objects.
0;If we are talking about OOP than the term  message passing  comes from Smalltalk.
0; In a few words the Smalltalk basic principles are.
0;I think this terms are more or less equivalent.
0; May be the only interesting difference is that message passing always rely on dynamic dispatch and late binding while in the case of method invocation one can use static dispatch and early binding too.
0; For example, C   does early binding by default until  virtual  keyword appears somewhere.
0;Anyway, regardless of which formalism do your programming language use for communication between two objects it s always considered a good OOP style to forbid direct access to instance variables in Smalltalk terminology or data members in C   terminology or whatever term is used in your programming language.
