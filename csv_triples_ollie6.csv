1;Practical_example_of_Complete_Binary_Tree;is;Binary_Heap;0.703
1;Binary_Heap;be_Practical_example_of;Complete_Binary_Tree;0.455
2;A_Perfect_Binary_Tree_of_height_h;has;2h_–;0.688
5;Tree_terminology;be_so_varies_in;the_literature;0.754
5;Tree_terminology;is;not_well_standardized_and_so_varies;0.734
9;every_node;can_have;any_number_of_children;0.825
9;every_node;can_have_any_number_of_children_in;a_normal_tree;0.591
9;every_node;be_any_number_of;children;0.553
9;any_number_of_children;can_be_have_in;a_normal_tree;0.473
10;every_node;can_have;a_maximum_of_2_children;0.825
10;every_node;be_a_maximum_of;2_children;0.553
10;a_special_type_of_tree_data_structure_in_which_every_node_can_have_a_maximum_of_2_children;is_binary;tree;0.451
11;the_other;is_known_as;right_child;0.914
11;One;is_known_as;left_child;0.9
40;a_particular_kind_of_a_binary_tree;called;a_Binary_Search_Tree;0.796
41;The_basic_idea;is_to_have;such_a_storing_repository_that_provides_the_efficient_way_of_data_sorting;0.853
41;the_efficient_way_of_data_sorting;be_provides_by;such_a_storing_repository;0.62
41;efficient;be_way_of;data_sorting;0.411
52;Each_node;has;zero_one_or_two_children;0.728
93;A_binary_tree;is_an_important_type_of;structure_which_occurs_very_often;0.926
93;A_binary_tree;is;an_important_type_of_structure;0.736
94;It;is_characterized_by;the_fact;0.859
94;any_node;can_have_at;most_two_branches;0.713
97;we;distinguish_between;the_subtree;0.784
98;a_binary_tree;Also_may_have;zero_nodes;0.727
99;a_binary_tree;Thus_is_really_a_different_object_than;a_tree;0.889
99;a_binary_tree;Thus_is_really;a_different_object;0.733
106;A_complete_binary_tree;is_a_binary_tree_except;the_last;0.894
106;all_nodes;has_to_are_far_left_as;possible;0.879
106;A_complete_binary_tree;is;a_binary_tree;0.788
108;A_binary_tree;can_be_converted_into;an_extended_binary_tree;0.929
108;These_new_nodes;are_added_in;such_a_way_that_all_the_nodes_in_the_resultant_tree_have_either_zero_or_two_children;0.91
108;It;is_also_called_2_–;tree;0.832
108;the_nodes;that_have;either_zero_or_two_children;0.633
108;It;is_also_called;2;0.617
108;new_nodes;be_adding_to;its_leaf_nodes_and_to_the_nodes_that_have_only_one_child;0.587
109;pointer_of_the_node;is_normally_set_to;NULL._These_large_numbers_of_pointer_sets;0.917
109;the_empty_sub_trees;are_set_to;NULL;0.877
109;the_empty_sub_trees;are_set_i;.e;0.816
109;the_empty_sub_trees;are_used_in;different_ways;0.694
109;whose_left_child;is;empty_sub_tree;0.639
111;Tree;represents;the_nodes_connected_by_edges;0.864
111;the_nodes;be_connected_by;edges;0.793
112;We;will_discuss_specifically_binary;tree_or_binary_search_tree;0.585
127;we;have_discussed_binary;tree;0.771
127;we;have_discussed_in;this_lesson;0.453
128;We;have_talked_about;different_types_of_binary_tree;0.832
128;We;have_"balanced_binary;tree;0.544
129;cost_of_operations;may_depend_upon;height_of_the_tree;0.847
129;cost_of_operations;may_want;a_tree_to_be_dense_and_its_height;0.705
129;we;may_depend_upon;height_of_the_tree;0.627
129;we;may_want;a_tree_to_be_dense_and_its_height;0.597
130;we;Finally_talked;about_two_possible_implementations_of_binary_tree__;0.691
130;possible;be_implementations_of;binary_tree__;0.355
131;http_://www;be_visit_for;practice_problems_and_more;0.408
135;com/MyCodeSchool;Follow_us_on;twitter;0.809
135;com/MyCodeSchool;Follow_us;https_://twitter;0.783
135;com/MyCodeSchool;Follow_https_://twitter_on;twitter;0.694
135;com/MyCodeSchool;Follow_https_://twitter;us;0.614
135;https_://twitter;be_Follow_us_on;twitter;0.577
135;us;be_Follow_https_://twitter_on;twitter;0.545
137;Scott_Mitchell;continues;his_study_of_data_structures;0.809
137;Scott_Mitchell;continues_his_study_of_data_structures_focusing_on;binary_trees_and_BSTs;0.672
151;NET_Framework;looks_at;a_common_data_structure_that_is_not_included_in_the;0.919
153;binary_trees;can_be_envisioned_as;storing_data)[enabler=Whereas_arrays_arrange_data_linearly;0.925
153;arrays;arrange_linearly;data;0.404
154;a_binary_search_tree_or_BST;allows_for;a_much_more_optimized_search_time;0.884
