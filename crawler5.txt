In this section we present two algorithms for exploring a graph, starting at one of its vertices, , and finding all vertices that are reachable from .
 Both of these algorithms are best suited to graphs represented using an adjacency list representation.
 Therefore, when analyzing these algorithms we will assume that the underlying representation is an AdjacencyLists.
This algorithm is a generalization of the breadth-first traversal algorithm for binary trees (SectionÂ 6.
1.
2), and is very similar; it uses a queue, , that initially contains only .
 It then repeatedly extracts an element from and adds its neighbours to , provided that these neighbours have never been in before.
 The only major difference between the breadth-first-search algorithm for graphs and the one for trees is that the algorithm for graphs has to ensure that it does not add the same vertex to more than once.
 It does this by using an auxiliary boolean array, , that tracks which vertices have already been discovered.
